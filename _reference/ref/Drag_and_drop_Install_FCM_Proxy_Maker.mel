// FCMHider - install file
// Email: francm127@hotmail.com

string $srcWindows=`asInstallScriptLocation`;
string $destWindows = `internalVar -userScriptDir`;
string $scriptIconFile = "FCM_Proxy_Maker_Logo.png";


global string $gShelfTopLevel;
string $currentShelf = `tabLayout -query -selectTab $gShelfTopLevel`;
setParent $currentShelf;
string $icon=$destWindows+$scriptIconFile;

sysFile -makeDir ($destWindows);
sysFile -copy $icon ($srcWindows);


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "FCM_Proxy_Maker" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "// minimalist version\nwindow -title \"Window\" -w 308 -h 65;\n\n    ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "FCM_Proxy_Maker_Logo.png" 
        -image1 "FCM_Proxy_Maker_Logo.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# FCM_Proxy_Maker\nversion = 'v1.2_OpenBeta'\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\nL i c e n s e \n\nv1.2:\n- Non skinned meshes removed. Automatic proxy now always excluded the non skinned, \nand create proxy manually always do nothing and you need to choose which method\nyou want to apply\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS \nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nI n s t a l l a t i o n \n    \n1) Put the folder image \"FCM_Proxy_Maker_Logo\" in this location:\nC:\\Users\\YourUser\\Documents\\maya\\201x\\prefs\\icons\n\n2)Drag and drop the file \"Drag_and_drop_Install_FCM_Proxy_Maker\" into the viewport. \nIt will create a new shelf button.\n\n\nC o n t a c t :\n    \n(If you have any feedback or want to bash me)\n-Email: francm127@hotmail.com\n-Facebook: facebook.com/Fran127\n-LinkedIn: linkedin.com/in/francm3danimator/\n\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n\nimport maya.cmds as cmds\nimport maya.mel as mel\nimport sys\nimport random\nimport math\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Create Proxy Skin Also For Non Skinned Meshes def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createProxySkinAlsoNonSkinned():\n    global FolderProxy, Set_Normal, Excluded_Nodes, Set_NoSkin_List, Set_Skin_List\n    FolderProxy = 'Folder_Proxys'\n    Set_Normal = 'Set_Normal'\n    Excluded_Nodes = 'Excluded_Nodes'\n    \n    # Check if nothing is selected\n    sel = cmds.ls (sl=True)\n    if len(sel) > 0:\n        # Check if there is a nurbsCurve selected\n        nurbsCurves = cmds.filterExpand (sm=9)\n        try:\n            if (len(nurbsCurves)) > 0:\n                cmds.warning('You must select only meshes')\n        except:\n            # Filter only Geos\n            geos = cmds.filterExpand (sm=12, fullPath=True)\n            cmds.pickWalk (geos, d=\"up\")\n            # Get the selections but avoiding the full path\n            list = cmds.ls (sl=True)\n            if len(list) > 0:\n                # Create Empty lists\n                Set_Skin_List = []\n                Set_NoSkin_List = []\n                # check if the items has skin or not and put them in temporary sets\n                for item in list:\n                        checkSkin = (mel.eval('findRelatedSkinCluster '+item))\n                        # if the result is less than 1 the mesh doesn't have skin\n                        if len( checkSkin ) > 1:\n                            Set_Skin_List.append(item)\n                        else:\n                            Set_NoSkin_List.append(item)\n                # Operation for skin meshes\n                cmds.select (Set_Skin_List)\n                createProxySkin()\n                # Operatin for non skinned meshes\n                cmds.select (Set_NoSkin_List)\n                '''\n                # Find wich radiobutton is selected for non skinned method\n                if cmds.radioButtonGrp (\"nonSkinnedMethod\", q=True, sl=True) == 1:\n                    def nonSkinnedMeshes():\n                        createProxyExcluded()  \n                if cmds.radioButtonGrp (\"nonSkinnedMethod\", q=True, sl=True) == 2:\n                    def nonSkinnedMeshes():\n                        createProxySkinOneJoint()\n                if cmds.radioButtonGrp (\"nonSkinnedMethod\", q=True, sl=True) == 3:\n                    def nonSkinnedMeshes():\n                        createGroupsAndSets()\n                        print (\"Non_Skinned_Mesh_Nothing\"),\n                        cmds.select (clear=True) \n                '''\n                createGroupsAndSets()\n                showProxy()\n                # If there is Non skinned meshes Show Proxy will turn off\n                if len(Set_NoSkin_List) > 1:\n                    hideorShowProxySet(value = 0)\n                    cmds.checkBoxGrp (\"ShowProxy\", e=True, value1=False)\n                # Print \n                result = []\n                for Obj in list:\n                    if \"_Proxy\" in Obj:\n                        pass\n                    else:\n                        result.append(Obj)\n                        print(str ( len(result) ) + ' Proxy Skin Created\\n' ),\n                        if len(Set_NoSkin_List) > 0:\n                            currentSel = cmds.ls(sl=True)\n                            if len(currentSel) > 1:\n                                cmds.warning(\"All the meshes you have selected don't have skincluster to copy from, choose what you want to do with them\")\n                            else:\n                                cmds.warning(\"The mesh you have selected doesn't have skincluster to copy from, choose what you want to do with it\")\n\n\n                \n                # Show or Hide Set_Proxy depending of the state of \"Show Proxy\" checkbox\n                if cmds.checkBoxGrp (\"ShowProxy\", query=True, value1=True) == 1:\n                    hideorShowProxySet(value = 1) \n                else:\n                    hideorShowProxySet(value = 0) \n                checkProxyAvaibleToCreate()\n                createHUD()\n    else:\n        cmds.warning('Nothing selected')\n    \n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Create Proxy Skin def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createProxySkin():\n    \n    # Progress Bar\n    if cmds.window (\"progressWindow\", exists=True):\n        cmds.deleteUI ('progressWindow')\n    if cmds.window (\"textTest\", exists=True):\n        cmds.deleteUI ('textTest')\n        \n    window = cmds.window('progressWindow', title='Progress Window' )\n    cmds.columnLayout( adjustableColumn=True )\n        \n    cmds.text('textTest', align='center')\n    progressControl = cmds.progressBar(maxValue=7, width=300, isInterruptable=True)\n    \n        \n    cmds.showWindow (window)\n    cmds.window (\"progressWindow\", edit=True, w=300, h=35, topLeftCorner= [250,760]) \n \n    # Create Proxy Skin\n    OrigM = cmds.ls (sl=True, long=True)\n    \n    for Obj in OrigM:\n        if \"_Proxy\" in Obj:\n            cmds.warning (\"Proxy Already Exists!\")\n        else:   \n            # Get Array for all selection\n            createGroupsAndSets()\n            # Progress bar \n            cmds.progressBar(progressControl, edit=True, step=1)\n    \n            # Duplicate and query the object\n            ProxyM = cmds.duplicate (Obj)\n            # Get all joints from selected Mesh\n            cmds.select (Obj)\n            getAllJointsFromSelection()\n            jointsAll = cmds.ls (type='joint')\n            # Bind Skin If the script looking joints from sel failed will apply for all the joints in the scene\n            try:\n                if len(joints) > 0:\n                    cmds.skinCluster (joints, ProxyM, n='skinCluster_Proxy_1')\n                else:\n                    cmds.skinCluster (jointsAll, ProxyM, n='skinCluster_Proxy_1')\n            except:\n                cmds.select (cmds.skinCluster (jointsAll, ProxyM, n='skinCluster_Proxy_1'))\n                \n            # Progress bar \n            cmds.text('textTest', edit=True, label='Assigning Skin from original mesh')\n            cmds.progressBar(progressControl, edit=True, step=1)\n            # Copy Skin\n            cmds.copySkinWeights (Obj, ProxyM, noMirror=True, surfaceAssociation='closestPoint', influenceAssociation='closestJoint')\n            cmds.text('textTest', edit=True, label='Copy skin')\n            cmds.progressBar(progressControl, edit=True, step=1)\n    \n            # Clean up / More fast than the legacy thanks to glTools!\n            cmds.text('textTest', edit=True, label='Remove unused influences')\n            cmds.progressBar(progressControl, edit=True, step=1)\n            remove_unused_influences (ProxyM)\n            # Progress bar\n            cmds.text('textTest', edit=True, label='Finishing operation')\n            cmds.progressBar(progressControl, edit=True, step=1)\n\n            # Put them into sets\n            cmds.sets (Obj, edit=True, add='Set_Normal')\n            cmds.sets (ProxyM, edit=True, add='Set_Proxy')\n            # Group Proxy    \n            group = cmds.group (ProxyM, name='Proxy_Skin_1')\n            # Change name of ProxyM\n            cmds.rename (ProxyM, ProxyM[0] + '_Proxy')\n            # Parent Group to Folder Proxys\n            cmds.parent (group, 'Folder_Proxys')\n            # End Progress bar\n            cmds.progressBar(progressControl, edit=True, endProgress=1)\n            \n    # Delete UI Progress Window\n    cmds.deleteUI ('progressWindow')\n\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Create Proxy Skin One Joint def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createProxySkinOneJoint():\n    # Get Array for all selection\n    OrigMeshes = cmds.ls (sl=True, long=True)\n    \n    for OrigM in OrigMeshes:\n        if \"_Proxy\" in OrigM:\n            cmds.warning (\"Proxy Already Exists!\")\n        else:\n         \n            # Get all joints from the scene\n            joints = cmds.ls (type='joint')   \n            createGroupsAndSets()\n            # Duplicate and Get an Array\n            ProxyM = cmds.duplicate (OrigM)\n    \n            # Put them into sets\n            cmds.sets (OrigM, edit=True, add='Set_Normal')\n            cmds.sets (ProxyM[0], edit=True, add='Set_Proxy')\n            # Group Proxy    \n            groupTemp = cmds.group (ProxyM[0], name='Proxy_Skin_OneJoint_1')       \n            # Parent Group to Folder Proxys\n            cmds.parent (groupTemp, 'Folder_Proxys')\n            # Find distance between all the joints in the scene and de Proxy meshes \n            dist = []\n            for j in joints:\n                sp = cmds.xform ( ProxyM[0], q=True, ws=True, scalePivot=True )\n                ep = cmds.xform ( j, q=True, ws=True, scalePivot=True )\n                distance = math.sqrt(  math.pow(sp[0]-ep[0],2) + math.pow(sp[1]-ep[1],2) + math.pow(sp[2]-ep[2],2)  )\n                dist.append([distance, j]) \n                dist.sort() \n                closest_jnt = dist[0][1]\n            # Apply skin with the nearest joint    \n            cmds.skinCluster(closest_jnt, ProxyM[0], n='skinCluster_Proxy_1') \n            # Change name of ProxyM\n            cmds.rename (ProxyM[0], ProxyM[0] + '_Proxy')\n            cmds.select(cl=True)\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Create Proxy Constraint Automatic WIP\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createProxyConstraintAutomatic():\n    # Get Array for all selection\n    OrigMeshes = cmds.ls (sl=True, long=True)\n    # Get all joints from the scene\n    joints = cmds.ls (type='nurbsCurve')  \n    cmds.select (joints)\n    cmds.pickWalk (d=\"up\")\n    joints = cmds.ls (sl=True, long=True)\n\n    createGroupsAndSets()\n        \n    for OrigM in OrigMeshes:\n        # Duplicate and Get an Array\n        ProxyM = cmds.duplicate (OrigM)\n    \n        # Put them into sets\n        cmds.sets (OrigM, edit=True, add='Set_Normal')\n        cmds.sets (ProxyM[0], edit=True, add='Set_Proxy')\n        # Group Proxy    \n        groupTemp = cmds.group (ProxyM[0])       \n        # Parent Group to Folder Proxys\n        cmds.parent (groupTemp, 'Folder_Proxys')\n        # Find distance between all the joints in the scene and de Proxy meshes \n        dist = []\n        for j in joints:\n            sp = cmds.xform ( ProxyM[0], q=True, ws=True, scalePivot=True )\n            ep = cmds.xform ( j, q=True, ws=True, scalePivot=True )\n            distance = math.sqrt(  math.pow(sp[0]-ep[0],2) + math.pow(sp[1]-ep[1],2) + math.pow(sp[2]-ep[2],2)  )\n            dist.append([distance, j]) \n            dist.sort() \n            closest_jnt = dist[0][1]\n        # Apply skin with the nearest joint    \n        cmds.parentConstraint (closest_jnt, groupTemp, mo=True) \n        # Change name of ProxyM\n        cmds.rename (ProxyM[0], OrigM + '_Proxy')    \n        cmds.rename (groupTemp, 'Proxy_Skin_OneCtrl_1')\n        cmds.select (clear=True)\n        showProxy()\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            create Proxy Constraint def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createProxyConstraint():\n        \n    tempSel = cmds.ls (sl=True)\n    # Sorry for using undo\n    cmds.undo()\n    # Get Geos\n    Omesh = cmds.filterExpand(sm=12, fullPath=True) # agregar full path\n    # Create CtrlFather array using the last element select\n    CtrlFather = tempSel[-1]\n\n    # Cancel operation if your last selection is not a nurbsCurve\n    cmds.select(CtrlFather)\n    cmds.pickWalk (d='down')\n    sel = cmds.ls(sl=True)\n    if cmds.objectType(sel) != 'nurbsCurve':\n        cmds.select(tempSel)\n        sys.exit('You must select a control for the last selection')\n        \n    createGroupsAndSets()\n     \n    # Create Pmesh\n    Pmesh = []\n    for mesh in Omesh:\n        sel = cmds.duplicate (mesh, name=(mesh + '_Proxy'))\n        \n        tempGroup = cmds.group(sel)\n        Pmesh.append(tempGroup)\n\n    # Create Group and constraint it\n    groupProxy = cmds.group (Pmesh, name='Proxy_Constraint_1')\n    cmds.parentConstraint (CtrlFather, groupProxy, mo=True)\n    # Put them into sets\n    cmds.sets (Omesh, edit=True, add='Set_Normal')\n    cmds.sets (Pmesh, edit=True, add='Set_Proxy')\n    # Parent groupProxy to Folder Proxys\n    cmds.parent (groupProxy, 'Folder_Proxys')\n    # Rename each PMesh as name_Proxy\n    for item in Pmesh:\n        cmds.rename (item, item + '_Proxy')\n\n\n    showProxy()\n    # Select Ctrl\n    cmds.select (CtrlFather)\n    \n        # Show or Hide Set_Proxy depending of the state of \"Show Proxy\" checkbox\n    if cmds.checkBoxGrp (\"ShowProxy\", query=True, value1=True) == 1:\n        hideorShowProxySet(value = 1) \n    else:\n        hideorShowProxySet(value = 0) \n    checkProxyAvaibleToCreate()\n   \n    \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Create Proxy Exclude def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createProxyExcluded():\n\n    sel = cmds.ls(sl=True)\n    createGroupsAndSets()\n\n    for s in sel:\n        if \"_Proxy\" in s:\n            cmds.warning (\"Proxy Already Exists!\")\n        else:\n        \n            if cmds.objectType (s) == \"transform\":\n                cmds.sets (s, edit=True, add='Set_Normal')\n\n            if cmds.objectType (s) == \"mesh\":\n                cmds.sets (s, edit=True, add='Set_Frozen')\n            # if is not a transform or mesh type it goes to exclude    \n            if cmds.objectType (s) != \"transform\":\n                if cmds.objectType (s) != \"mesh\":\n                    cmds.sets (s, edit=True, add='Excluded_Nodes')\n\n            # go to Proxy Mode\n            cmds.setAttr (\"Folder_Proxys.visibility\", 1)\n            showProxy()\n            \n            \n            print(str ( len(sel) ) + ' Proxy Excluded Created' ),\n            checkProxyAvaibleToCreate()\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Process for skinning methods \n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef remove_unused_influences(skinCls, targetInfluences=[]):\n    '''\n    Snippet to removeUnusedInfluences in Autodesk Maya using Python.\n    The MEL version runs slowly, over every influence one at a time.\n    \"targetInfluences\" allows you to directly specify which influences to remove.\n    This will only remove targets which are not currently being used.\n    '''\n    allInfluences = cmds.skinCluster(skinCls, q=True, inf=True)\n    weightedInfluences = cmds.skinCluster(skinCls, q=True, wi=True)\n    unusedInfluences = [inf for inf in allInfluences if inf not in weightedInfluences]\n    if targetInfluences:\n        unusedInfluences = [\n                inf for inf in allInfluences\n                if inf in targetInfluences\n                if inf not in weightedInfluences\n                ]\n    cmds.skinCluster(skinCls, e=True, removeInfluence=unusedInfluences)\n\n\ndef getAllJointsFromSelection():\n    global joints\n    sel = cmds.ls (sl=True)\n    history = cmds.listHistory( sel, leaf=True )\n    result= []\n    for item in history:\n        if \"skinCluster\" in cmds.objectType (item):\n            result.append(item)\n    result2 = []\n    for r in result:\n        hola = cmds.skinCluster(r, query=True, inf=True)\n        result2.append(hola)\n    cmds.select (cl=True) \n    for each in result2:\n     \tcmds.select(each, add=True )\n    joints = cmds.ls (sl=True)\n    cmds.select (cl=True) \n       \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Delete Proxy def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n# Delete All\ndef deleteAllProxys():\n    # set Show proxy to On\n    cmds.checkBoxGrp (\"ShowProxy\", e=True, value1=True)\n    # Turn off frozen propagation\n    cmds.freezeOptions( explicitPropagation=False )\n    cmds.freezeOptions( downstream='none' )\n    \n    # Turn on all the checkboxes\n    cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value1=True, value2=True, value3=True)\n    cmds.checkBoxGrp ('NodesCheckbox2', edit=True, value1=True, value2=True, value3=True)\n    cmds.checkBoxGrp ('NodesCheckbox3', edit=True, value1=True, value2=True, value3=True)\n    cmds.checkBoxGrp ('NodesCheckbox4', edit=True, value1=True, value2=True, value3=True)\n    cmds.checkBoxGrp ('NodesCheckbox5', edit=True, value1=True, value2=True)\n    \n    if cmds.objExists(\"Folder_Proxys\"):\n        hideProxy()\n        cmds.delete('Folder_Proxys')\n    if cmds.objExists(\"Set_Normal\"):\n        cmds.delete('Set_Normal')\n    if cmds.objExists(\"Set_Proxy\"):\n        cmds.delete('Set_Proxy')\n    if cmds.objExists(\"Excluded_Nodes\"):\n        cmds.delete('Excluded_Nodes')\n    if cmds.objExists(\"Set_Frozen\"):\n        cmds.delete('Set_Frozen')\n    if cmds.objExists('FCM_Proxy_Maker_Settings'):\n        cmds.delete('FCM_Proxy_Maker_Settings')\n    if cmds.objExists(\"Set_Rig\"):\n        cmds.select (\"Set_Rig\")\n        try:\n            cmds.setAttr (\".visibility\", 1)\n        except:\n            cmds.setAttr (\".lodVisibility\", 1)\n        cmds.delete('Set_Rig')\n        cmds.select (clear=True)\n    try:\n        cmds.headsUpDisplay (\"HUDProxy\", edit=True, visible=0)\n    except:\n        pass\n\n\n    \n        print (\"All FCM_Performance Deleted\"),\n    if cmds.objExists ('Folder_Proxys') == 0:\n        print (\"All FCM_Performance Deleted\"),\n        \n\n##########################################\ndef DeleteSelected():\n    \n    global sel, result, s\n    # remove selected\n    sel = cmds.ls(sl=True)\n    result = []\n    \n    if len(sel) >= 1:\n        for s in sel:\n            if \"_Proxy\" in s:    \n                # show all the original meshes\n                hideProxy()\n                # Remove \"_Proxy\" for each selection\n                result = ''.join([str(s)]) \n                result = result.replace('_Proxy', '')\n                # Remove from Set\n                try:\n                    cmds.sets ((\"*:*\" + result), edit=True, rm=\"Set_Normal\")\n                # if the object doesn't have a namespace is because is proxy node so let's try this\n                except:\n                    cmds.sets ( s, edit=True, rm=\"Set_Normal\")\n                # if the original mesh is a shape (for proxy constraint)\n                try:\n                    cmds.sets ((\"*:*\" + result + \"Shape\"), edit=True, rm=\"Set_Normal\")\n                except:\n                    pass\n\n                # Go back to Proxy mode\n                showProxy()\n                # Delete proxys\n                cmds.pickWalk (s, d=\"up\")\n                cmds.delete ()\n                print (str (len(sel)) + \" Proxy deleted\"),\n            else:\n                # search for a node             \n                objType = cmds.objectType (s)   \n                if objType == 'transform':\n                    # if is not a deform node\n                    cmds.warning(\"This is not a proxy!\")\n                else:\n                    # turn on nodeState\n                    cmds.setAttr (s + '.nodeState', 0)\n                    # remove them from the excluded set\n                    cmds.sets (s, edit=True, rm=\"Excluded_Nodes\")\n                    print ('nodes excluded successfully\\n'),\n    else:\n        cmds.warning(\"You must have something selected\")\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Selection Tools\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n# Get All Nodes Scene From Selection\ndef getAllNodesSceneFromSelection():\n    currentSel = cmds.ls (sl=True)\n    node = cmds.objectType (currentSel)\n    allObjTypeSelected = cmds.ls (type=node)\n    cmds.select (allObjTypeSelected)\n    numberSel = len(allObjTypeSelected)\n    print (str(numberSel) + \" \" + str(node) + \" Selected\" ),\n\ndef selectAllVisibleMeshes():\n    shapesAndShapesOrig = cmds.ls (v=True, type='mesh')\n    meshes = cmds.filterExpand(shapesAndShapesOrig, sm= 12 )\n    cmds.select(meshes)\n    \n    sel = cmds.ls (sl=True)\n    for mesh in sel:\n        # remove from the list if the mesh is hided trough layerDisplay\n        if cmds.getAttr (mesh + '.overrideVisibility') == 0:\n            meshes.remove(mesh)\n        # remove from the list if the mesh is hided trough losVisibility\n        if cmds.getAttr (mesh + '.lodVisibility') == 0:\n            meshes.remove(mesh)\n    \n    cmds.select(meshes)\n\ndef removeObjectsWithoutNameSpaces():\n    sel = cmds.ls(sl=True)\n    result = []\n    for s in sel:\n        nameSpace = s.rpartition(':')[0]\n        if len(nameSpace) == 0:\n            result.append(s)\n    cmds.select(sel)\n    cmds.select(result, d=True)\n    sel = cmds.ls(sl=True)\n    \n    \ndef unlockAllVismeshes():\n    shapesAndShapesOrig = cmds.ls (v=True, type='mesh')\n    meshes = cmds.filterExpand(shapesAndShapesOrig, sm= 12 )\n    groups = cmds.ls(type='transform')\n    groupsAndMeshes = groups + meshes\n    try:\n        for item in groupsAndMeshes:\n            if cmds.getAttr (item + '.overrideDisplayType') == 2:\n                cmds.setAttr (item + '.overrideDisplayType', 0)\n                print ('All visible meshes are selectable now'), \n    except:\n        cmds.warning(\"Couldn't unlock all the meshes because they are in a layerDisplay, check if you can unlock them trough layer display\")\n       \n    \n\n# This is still wip, it needs to try with diferents names and\ndef selectallFaceGroups():\n    cmds.select ('*:*Face*')\n    transform = cmds.ls (sl=True, type='transform')\n    cmds.select (transform)\n    \n'''\nWIP \ndef filterSel():\n    transform = cmds.ls (sl=True, type='transform')\n    cmds.select (transform)\n\ndef findWord():\n    try:\n        cmds.select (word)\n    except:\n        cmds.warning('Nothing could been selected')\n\n\nword = '*:*Head*'; findWord()\nword = '*:*Facial*'; findWord()\n\n\n'''      \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Smooth preview def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef smoothPreviewAll():\n    allShapeMeshes = cmds.ls (type=\"mesh\")\n    for mesh in allShapeMeshes:\n        try:\n            cmds.setAttr (mesh + \".displaySmoothMesh\", value1)\n        except:\n            pass\n        try:\n            cmds.setAttr (mesh + \".smoothLevel\", value2)\n        except:\n            pass\n\ndef smoothPreviewSelected():\n    allShapeMeshes = cmds.ls (sl=True)\n    for mesh in allShapeMeshes:\n        try:\n            cmds.setAttr (mesh + \".displaySmoothMesh\", value1)\n        except:\n            pass\n        try:\n            cmds.setAttr (mesh + \".smoothLevel\", value2)\n        except:\n            pass\n\ndef applyButtonSPM():\n    global value1; global value2\n      \n    test2 = cmds.radioButtonGrp (\"Radio2\", q=True, select=True)\n    if test2 == 1:        \n        value1 = 0\n        value2 = 2\n        \n    if test2 == 2:       \n        value1 = 2\n        value2 = 1\n\n    if test2 == 3:      \n        value1 = 2\n        value2 = 2\n\n    test1 = cmds.radioButtonGrp (\"Radio1\", q=True, select=True)\n    if test1 == 1:\n        smoothPreviewSelected()\n        print (\"Selected\")\n        \n    if test1 == 2:\n        smoothPreviewAll()\n        print (\"all\")\n  \n      \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Simple buttons window def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef checkProxyAvaibleToCreate():\n    # detect if there isn't more proxy to do\n    currentSel = cmds.ls(sl=True)\n    selectAllVisibleMeshes()\n    removeObjectsWithoutNameSpaces()\n    sel = cmds.ls(sl=True)\n    if len(sel) == 0:\n        hideorShowProxySet(value = 1)\n        cmds.checkBoxGrp (\"ShowProxy\", e=True, value1=True)\n        print('There is no more Proxies to create in the scene'),\n    else:\n        hideorShowProxySet(value = 0)\n        cmds.checkBoxGrp (\"ShowProxy\", e=True, value1=False)\n    cmds.select(currentSel)\n    createHUD()\n\n\ndef frozenAllSelected():\n    sel = cmds.ls(sl=True)\n    for s in sel:\n        cmds.setAttr(s + '.frozen', 1)\ndef unFrozenAllSelected():\n    sel = cmds.ls(sl=True)\n    for s in sel:\n        cmds.setAttr(s + '.frozen', 0)\n\ndef selectMostComplexMesh():\n    meshes = []\n    meshes = cmds.ls ( type='mesh')\n    meshes = cmds.filterExpand(meshes, sm=12)\n    filteredMeshes = []\n    for mesh in meshes:\n        \n        # query all the nodes\n        history = cmds.listHistory(mesh)\n        # transform nodes into numbers\n        numHistory = len(history)\n        # Pair numbers with single mesh\n        filteredMeshes.append([numHistory, mesh])\n        # order minor to major\n        filteredMeshes.sort()\n    \n    for mesh in filteredMeshes:\n        cmds.select(mesh[1])\n    cmds.pickWalk (d='down')\n\ndef printBlockingNodes():\n    blockingTypes = cmds.evaluator (q=True, name=\"dynamics\", valueName=\"disabledNodes\")\n    if len(blockingTypes) > 0:\n        print(blockingTypes),\n    else:\n        cmds.warning('Nothing is blocking parallel')\n\n\ndef deleteOriginalRig():\n    delete_SetNormal_FromMinorToHighHistory();\n    cmds.delete ('Set_Proxy','Excluded_Nodes')\n    if cmds.objExists ('Set_Normal'):\n        cmds.delete ('Set_Normal')\n        \n##### Poly Reduce multiple selection\ndef reducePoly(percentage = 50):\n    meshes = cmds.ls (sl=True)\n    for mesh in meshes:\n        if \"_Proxy\" in mesh:\n            cmds.polyReduce  (mesh, ver= 1, trm=0, shp=0, keepBorder=1, keepMapBorder=1, keepColorBorder=1, keepFaceGroupBorder=1, keepHardEdge=1, keepCreaseEdge=1, keepBorderWeight=0.5, keepMapBorderWeight=0.5, keepColorBorderWeight=0.5, keepFaceGroupBorderWeight=0.5, keepHardEdgeWeight=0.5, keepCreaseEdgeWeight=0.5, useVirtualSymmetry=0, symmetryTolerance=0.01, sx=0, sy=1, sz=0, sw=0, preserveTopology=1, keepQuadsWeight=1, vertexMapName=\"\", cachingReduce=1, ch=1, p=percentage,  vct=0, tct=0, replaceOriginal=1 )\n            cmds.BakeNonDefHistory(mesh)\n        else:\n            cmds.warning(\"This is not a proxy mesh\")\n            \n\n##### Toggle node State\ndef toggleNodeState():\n    nodes = cmds.ls (sl=True)\n    if cmds.getAttr (nodes[0] + \".nodeState\") == 1:\n        value = 0\n        for node in nodes:\n            cmds.setAttr (node + \".nodeState\", value)\n            #cmds.setAttr (node + \".frozen\", value)\n            print(str(node) + \" Turned On\\n\"),\n    else:\n        value = 1\n        for node in nodes:\n            cmds.setAttr (node + \".nodeState\", value)\n            #cmds.setAttr (node + \".frozen\", value)\n            print(str(node) + \" Turned Off\\n\"),\n            \n##### Give me the Type\ndef giveMeTheType():\n    selection = cmds.ls(sl=True)\n    \n    for obj in selection:\n        objType = cmds.objectType (obj)\n        \n        print (str(obj) + \" \" + str(objType) + \"\\n\" ),\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    Toggle Proxy def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n            # hide Or Show Proxy Set / 0 = visibile / 1 = unvisible\ndef hideorShowProxySet(value = 0):\n    if cmds.objExists (\"Folder_Proxys\"):\n        \n        sel = cmds.ls (sl=True)\n        cmds.select (\"Set_Proxy\")\n        allContentSetProxy = cmds.ls (sl=True)\n        for proxy in allContentSetProxy:\n            try:\n                cmds.setAttr (proxy + \".visibility\", value)\n            except:\n                cmds.setAttr (proxy + \".lodVisibility\", value)    \n                \n        createHUD()\n        \n        cmds.select (sel)\n    else:\n        cmds.warning(\"No proxys found\")\n\n\n \n            # Create HUD\ndef createHUD():\n    try:\n        if cmds.objExists('Folder_Proxys'):\n            if cmds.headsUpDisplay (\"HUDProxy\", exists=True, q=True) == 0:\n                cmds.headsUpDisplay (\"HUDProxy\", label=\"Proxy\", labelFontSize=\"large\", section=2, block=4)\n            if cmds.getAttr (\"Folder_Proxys.visibility\") == 1:\n                cmds.headsUpDisplay (\"HUDProxy\", edit=True, visible=1)\n            else:\n                cmds.headsUpDisplay (\"HUDProxy\", edit=True, visible=0)\n            \n            # Check if Show proxy is on or off\n            if cmds.checkBoxGrp (\"ShowProxy\", query=True, value1=True):\n                cmds.headsUpDisplay (\"HUDProxy\", edit=True, label='Proxy')\n            else:\n                cmds.headsUpDisplay (\"HUDProxy\", edit=True, label='Proxy (Hidden)')\n                        \n        else:\n            cmds.headsUpDisplay (\"HUDProxy\", edit=True, visible=0)        \n    except:\n        cmds.warning (\"Couldn't create HUD\")\n\n\n\n\n\n            # ShowProxy def\ndef showProxy():\n    global Set_Normal, Excluded_Nodes, Set_Frozen\n    sel = cmds.ls (sl=True)\n    ###############\n    if cmds.objExists (Set_Normal):\n        cmds.select (Set_Normal)\n    allContentSetNormal = cmds.ls (sl=True)\n    \n    for obj in allContentSetNormal:\n        try:\n            cmds.setAttr (obj + \".visibility\", 0)\n        except:\n            cmds.setAttr (obj + \".lodVisibility\", 0)\n    ###############\n    if cmds.objExists (Excluded_Nodes):\n        cmds.select (Excluded_Nodes)\n    allContentExcludedNodes = cmds.ls (sl=True)\n    \n    for obj in allContentExcludedNodes:\n        try:\n            cmds.setAttr (obj + \".nodeState\", 1)\n        except:\n            pass\n\n    ###############\n    if cmds.objExists (Set_Frozen):\n        cmds.select (Set_Frozen)\n        allContentSetFrozen = cmds.ls(sl=True)\n        \n    if len(allContentSetFrozen) > 0:\n    \n        for obj in allContentSetFrozen:\n            try:\n                cmds.setAttr (obj + \".frozen\", 1)\n            except:\n                pass\n        # Downstream Freeze Mode = 'Always'\n        cmds.freezeOptions( explicitPropagation=True )\n        cmds.freezeOptions( downstream='force' )\n    ###############             \n    createHUD()\n    cmds.select (sel)\n\n\n            # HideProxy def\ndef hideProxy():\n    global Set_Normal, Excluded_Nodes, Set_Frozen\n    sel = cmds.ls (sl=True)\n    ###############\n    if cmds.objExists (Set_Normal):\n        cmds.select (Set_Normal)\n    \n    allContentSetNormal = cmds.ls (sl=True)\n    \n    for obj in allContentSetNormal:\n        try:\n            cmds.setAttr (obj + \".visibility\", 1)\n        except:\n            cmds.setAttr (obj + \".lodVisibility\", 1)\n    ###############\n    if cmds.objExists (Excluded_Nodes):\n        cmds.select (Excluded_Nodes)\n    allContentExcludedNodes = cmds.ls (sl=True)\n    \n    for obj in allContentExcludedNodes:\n        try:\n            cmds.setAttr (obj + \".nodeState\", 0)\n        except:\n            pass\n    ###############\n    if cmds.objExists (Set_Frozen):\n        cmds.select (Set_Frozen)\n        allContentSetFrozen = cmds.ls(sl=True)\n        \n        if len(allContentSetFrozen) > 0:\n        \n            for obj in allContentSetFrozen:\n                try:\n                    cmds.setAttr (obj + \".frozen\", 0)\n                except:\n                    pass\n            # Downstream Freeze Mode = 'Always'\n            cmds.freezeOptions( explicitPropagation=False )\n            cmds.freezeOptions( downstream='none' )\n\n            \n    ###############      \n    createHUD()\n    cmds.select (sel)\n\n\n\ndef toggleButton():\n    global Set_Normal, Excluded_Nodes, FolderProxy, currentSelProxy, Set_Frozen\n    # if there a Folder Proxy    \n    try:\n        currentSelProxy = cmds.ls (sl=True)\n        # if there is a proxy in the scene prioritize that one\n        if cmds.objExists (\"Folder_Proxys\"):\n            FolderProxy = 'Folder_Proxys'\n            Set_Normal = 'Set_Normal'\n            Excluded_Nodes = 'Excluded_Nodes'\n            Set_Frozen = 'Set_Frozen'\n            toggleProxy()\n            cmds.select (currentSelProxy) \n        else:\n            cmds.select (\"*:*Folder_Proxys\")\n            nFolderP = cmds.ls (sl=True)\n            cmds.select (cl=True)\n            # if there is more Folder proxys than one \n            if len(nFolderP) > 1:\n                getProxySelected()\n                toggleProxy()\n                cmds.select (currentSelProxy)\n            else:\n                FolderProxy = '*:*Folder_Proxys'\n                Set_Normal = '*:*Set_Normal'\n                Excluded_Nodes = '*:*Excluded_Nodes'\n                Set_Frozen = '*:*Set_Frozen'\n                toggleProxy()\n                cmds.select (currentSelProxy)\n                \n    # If there isn't a Folder Proxy      \n    except:\n        cmds.warning(\"No Proxys found\\n\")\n        try:\n            cmds.headsUpDisplay (\"HUDProxy\", edit=True, visible=0)\n        except:\n            cmds.warning(\"No Proxys found\\n\"),\n        \n\n####################\n\ndef toggleProxy():\n    global Set_Normal, Excluded_Nodes, Set_Frozen, FolderProxy\n    createHUD()\n    if cmds.getAttr ( FolderProxy + \".visibility\") == 1:  \n                    # Normal mode\n        \n        cmds.refresh(suspend=True)\n        \n        cmds.setAttr ( FolderProxy + \".visibility\", 0)\n        hideProxy()\n        # Step foward and backward to avoid viewport bugs\n        mel.eval ('playButtonStepForward')\n        mel.eval ('playButtonStepBackward')\n        \n        cmds.refresh(suspend=False)\n        \n        print ('Normal Mode'),\n    else:\n                    # Proxymode\n        \n        cmds.refresh(suspend=True)\n        \n        cmds.setAttr (FolderProxy + \".visibility\", 1)\n        showProxy()\n        # Step foward and backward to avoid viewport bugs\n        mel.eval ('playButtonStepForward')\n        mel.eval ('playButtonStepBackward')\n        \n        cmds.refresh(suspend=False)\n        \n        print ('Proxy Mode'),\n        \n        \n####################\n     \n\ndef getProxySelected():\n    global Set_Normal, Excluded_Nodes, FolderProxy, namespaceRef, Set_Frozen\n    \n    # If the current selection is more than one it look for a new proxy, if is not\n    # it will switching between your last selection\n    if len(currentSelProxy) > 0:\n        # Query namespace\n        namespaceRef = cmds.referenceQuery( currentSelProxy[0], referenceNode=True )\n    # Transform to String\n    namespaceRef = ''.join([str(elem) for elem in namespaceRef]) \n    # Remove RN and replace for :\n    namespaceRef = namespaceRef.replace('RN', ':')\n    # assigning new FolderProxy string\n    FolderProxy = (namespaceRef + 'Folder_Proxys')\n    # Assign Folder_Proxy, Set_Normal and Excluded_Nodes with the current Namespace Selected\n    Set_Normal = ( namespaceRef + 'Set_Normal')\n    Excluded_Nodes = ( namespaceRef + 'Excluded_Nodes')\n    Set_Frozen = ( namespaceRef + 'Set_Frozen')\n    cmds.select (cl=True)\n\n  \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    Tintero def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n'''\n# Turn off all animated expresion\nfor node in cmds.ls( type='expression' ):\n    cmds.setAttr( '{}.animated'.format(node), 0 )\n\n# Turn on invisibility evaluator\ncmds.evaluator(enable=True, name='invisibility')\n\n \n\n            # Create Set_Rig\ndef createSetRig(value = 0):\n             \n    if cmds.objExists (\"Set_Rig\"):\n        cmds.select (\"Set_Rig\")\n        try:\n            cmds.setAttr (\".visibility\", value)\n        except:\n            cmds.setAttr (\".lodVisibility\", value)\n        cmds.select (clear=True)\n    else:\n        test1 = cmds.ls (sl=True)\n        if len(test1) >= 1:\n                # This is a slow command that's why only create the set if the user wants it\n                import pymel.core as pm\n                root = pm.selected()[0].root()\n                print root.name()\n                pm.select (root)\n                cmds.sets (name=\"Set_Rig\")\n                try:\n                    cmds.setAttr (\".visibility\", value)\n                except:\n                    cmds.setAttr (\".lodVisibility\", value)\n                cmds.select (clear=True)\n        else:\n            cmds.warning (\"Select random element of the Rig\")\n\n'''\n\n#########################\n# Select the most complex mesh of the scene\n'''\n# get meshes\ncmds.select('Set_Normal')\ncmds.pickWalk (d='down')\nmeshes = cmds.ls ( sl=True)\n# empty List\nfilteredMeshes = []\n\nfor mesh in meshes:\n    \n    # query all the nodes\n    history = cmds.listHistory(mesh)\n    # transform nodes into numbers\n    numHistory = len(history)\n    # Pair numbers with single mesh\n    filteredMeshes.append([numHistory, mesh])\n    # order minor to major\n    filteredMeshes.sort()\n\n\n# pick the last 5\nfor item in filteredMeshes:\n    try:\n        cmds.select(item[1])\n    except:\n        pass\n\n'''\n\n#########################\n'''\n# Freeze all content of a layerDisplay\n# Es probable q tenga q activar el downstream force\ncmds.freezeOptions( displayLayers=True )\n# Freeze all content of a layerDisplay\ncmds.freezeOptions( displayLayers=False )\n'''\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Shelf Buttons def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef createShelfButton():\n    mel.eval(\"string $srcWindows=`asInstallScriptLocation`;\\nstring $destWindows = `internalVar -userScriptDir`;\\nstring $scriptIconFile = \\\"FCM_Proxy_Maker_Logo.png\\\";\\n\\n\\nglobal string $gShelfTopLevel;\\nstring $currentShelf = `tabLayout -query -selectTab $gShelfTopLevel`;\\nsetParent $currentShelf;\\nstring $icon=$destWindows+$scriptIconFile;\\n\\nsysFile -makeDir ($destWindows);\\nsysFile -copy $icon ($srcWindows);\\n\\n    shelfButton\\n        -enableCommandRepeat 1\\n        -enable 1\\n        -width 35\\n        -height 35\\n        -manage 1\\n        -visible 1\\n        -preventOverride 0\\n        -annotation \\\"FCM_Proxy_Maker\\\" \\n        -enableBackground 0\\n        -highlightColor 0.321569 0.521569 0.65098 \\n        -align \\\"center\\\" \\n        -labelOffset 0\\n        -rotation 0\\n        -flipX 0\\n        -flipY 0\\n        -imageOverlayLabel \\\"Toggle\\\"\\n        -useAlpha 1\\n        -font \\\"plainLabelFont\\\" \\n        -overlayLabelColor 0.8 0.8 0.8 \\n        -overlayLabelBackColor 0 0 0 0.5 \\n        -image \\\"absolute.png\\\" \\n        -image1 \\\"absolute.png\\\" \\n        -style \\\"iconOnly\\\" \\n        -marginWidth 1\\n        -marginHeight 1\\n        -command \\\"try:\\\\n    toggleButton()\\\\nexcept:\\\\n    cmds.python(\\\\\\\"\\\\\\\\ndef toggleButton():\\\\\\\\n    global Set_Normal, Excluded_Nodes, FolderProxy, currentSelProxy, Set_Frozen\\\\\\\\n    # if there a Folder Proxy    \\\\\\\\n    try:\\\\\\\\n        currentSelProxy = cmds.ls (sl=True)\\\\\\\\n        # if there is a proxy in the scene prioritize that one\\\\\\\\n        if cmds.objExists (\\\\\\\\\\\\\\\"Folder_Proxys\\\\\\\\\\\\\\\"):\\\\\\\\n            FolderProxy = 'Folder_Proxys'\\\\\\\\n            Set_Normal = 'Set_Normal'\\\\\\\\n            Excluded_Nodes = 'Excluded_Nodes'\\\\\\\\n            Set_Frozen = 'Set_Frozen'\\\\\\\\n            toggleProxy()\\\\\\\\n            cmds.select (currentSelProxy) \\\\\\\\n        else:\\\\\\\\n            cmds.select (\\\\\\\\\\\\\\\"*:*Folder_Proxys\\\\\\\\\\\\\\\")\\\\\\\\n            nFolderP = cmds.ls (sl=True)\\\\\\\\n            cmds.select (cl=True)\\\\\\\\n            # if there is more Folder proxys than one \\\\\\\\n            if len(nFolderP) > 1:\\\\\\\\n                getProxySelected()\\\\\\\\n                toggleProxy()\\\\\\\\n                cmds.select (currentSelProxy)\\\\\\\\n            else:\\\\\\\\n                FolderProxy = '*:*Folder_Proxys'\\\\\\\\n                Set_Normal = '*:*Set_Normal'\\\\\\\\n                Excluded_Nodes = '*:*Excluded_Nodes'\\\\\\\\n                Set_Frozen = '*:*Set_Frozen'\\\\\\\\n                toggleProxy()\\\\\\\\n                cmds.select (currentSelProxy)\\\\\\\\n                \\\\\\\\n    # If there isn't a Folder Proxy      \\\\\\\\n    except:\\\\\\\\n        cmds.warning(\\\\\\\\\\\\\\\"No Proxys found\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n        try:\\\\\\\\n            cmds.headsUpDisplay (\\\\\\\\\\\\\\\"HUDProxy\\\\\\\\\\\\\\\", edit=True, visible=0)\\\\\\\\n        except:\\\\\\\\n            cmds.warning(\\\\\\\\\\\\\\\"No Proxys found\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"),\\\\\\\\n            \\\\\\\\n            # ShowProxy def\\\\\\\\ndef showProxy():\\\\\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen\\\\\\\\n    sel = cmds.ls (sl=True)\\\\\\\\n    ###############\\\\\\\\n    if cmds.objExists (Set_Normal):\\\\\\\\n        cmds.select (Set_Normal)\\\\\\\\n    allContentSetNormal = cmds.ls (sl=True)\\\\\\\\n    \\\\\\\\n    for obj in allContentSetNormal:\\\\\\\\n        try:\\\\\\\\n            cmds.setAttr (obj + \\\\\\\\\\\\\\\".visibility\\\\\\\\\\\\\\\", 0)\\\\\\\\n        except:\\\\\\\\n            cmds.setAttr (obj + \\\\\\\\\\\\\\\".lodVisibility\\\\\\\\\\\\\\\", 0)\\\\\\\\n    ###############\\\\\\\\n    if cmds.objExists (Excluded_Nodes):\\\\\\\\n        cmds.select (Excluded_Nodes)\\\\\\\\n    allContentExcludedNodes = cmds.ls (sl=True)\\\\\\\\n    \\\\\\\\n    for obj in allContentExcludedNodes:\\\\\\\\n        try:\\\\\\\\n            cmds.setAttr (obj + \\\\\\\\\\\\\\\".nodeState\\\\\\\\\\\\\\\", 1)\\\\\\\\n        except:\\\\\\\\n            pass\\\\\\\\n\\\\\\\\n    ###############\\\\\\\\n    if cmds.objExists (Set_Frozen):\\\\\\\\n        cmds.select (Set_Frozen)\\\\\\\\n        allContentSetFrozen = cmds.ls(sl=True)\\\\\\\\n        \\\\\\\\n    if len(allContentSetFrozen) > 0:\\\\\\\\n    \\\\\\\\n        for obj in allContentSetFrozen:\\\\\\\\n            try:\\\\\\\\n                cmds.setAttr (obj + \\\\\\\\\\\\\\\".frozen\\\\\\\\\\\\\\\", 1)\\\\\\\\n            except:\\\\\\\\n                pass\\\\\\\\n        # Downstream Freeze Mode = 'Always'\\\\\\\\n        cmds.freezeOptions( explicitPropagation=True )\\\\\\\\n        cmds.freezeOptions( downstream='force' )\\\\\\\\n    ###############             \\\\\\\\n    createHUD()\\\\\\\\n    cmds.select (sel)\\\\\\\\n\\\\\\\\n            # HideProxy def\\\\\\\\ndef hideProxy():\\\\\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen\\\\\\\\n    sel = cmds.ls (sl=True)\\\\\\\\n    ###############\\\\\\\\n    if cmds.objExists (Set_Normal):\\\\\\\\n        cmds.select (Set_Normal)\\\\\\\\n    \\\\\\\\n    allContentSetNormal = cmds.ls (sl=True)\\\\\\\\n    \\\\\\\\n    for obj in allContentSetNormal:\\\\\\\\n        try:\\\\\\\\n            cmds.setAttr (obj + \\\\\\\\\\\\\\\".visibility\\\\\\\\\\\\\\\", 1)\\\\\\\\n        except:\\\\\\\\n            cmds.setAttr (obj + \\\\\\\\\\\\\\\".lodVisibility\\\\\\\\\\\\\\\", 1)\\\\\\\\n    ###############\\\\\\\\n    if cmds.objExists (Excluded_Nodes):\\\\\\\\n        cmds.select (Excluded_Nodes)\\\\\\\\n    allContentExcludedNodes = cmds.ls (sl=True)\\\\\\\\n    \\\\\\\\n    for obj in allContentExcludedNodes:\\\\\\\\n        try:\\\\\\\\n            cmds.setAttr (obj + \\\\\\\\\\\\\\\".nodeState\\\\\\\\\\\\\\\", 0)\\\\\\\\n        except:\\\\\\\\n            pass\\\\\\\\n    ###############\\\\\\\\n    if cmds.objExists (Set_Frozen):\\\\\\\\n        cmds.select (Set_Frozen)\\\\\\\\n        allContentSetFrozen = cmds.ls(sl=True)\\\\\\\\n        \\\\\\\\n        if len(allContentSetFrozen) > 0:\\\\\\\\n        \\\\\\\\n            for obj in allContentSetFrozen:\\\\\\\\n                try:\\\\\\\\n                    cmds.setAttr (obj + \\\\\\\\\\\\\\\".frozen\\\\\\\\\\\\\\\", 0)\\\\\\\\n                except:\\\\\\\\n                    pass\\\\\\\\n            # Downstream Freeze Mode = 'Always'\\\\\\\\n            cmds.freezeOptions( explicitPropagation=False )\\\\\\\\n            cmds.freezeOptions( downstream='none' )\\\\\\\\n\\\\\\\\n    ###############      \\\\\\\\n    createHUD()\\\\\\\\n    cmds.select (sel)\\\\\\\\n\\\\\\\\n####################\\\\\\\\n\\\\\\\\ndef toggleProxy():\\\\\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen, FolderProxy\\\\\\\\n    createHUD()\\\\\\\\n    if cmds.getAttr ( FolderProxy + \\\\\\\\\\\\\\\".visibility\\\\\\\\\\\\\\\") == 1:  \\\\\\\\n                    # Normal mode\\\\\\\\n        \\\\\\\\n        cmds.refresh(suspend=True)\\\\\\\\n        \\\\\\\\n        cmds.setAttr ( FolderProxy + \\\\\\\\\\\\\\\".visibility\\\\\\\\\\\\\\\", 0)\\\\\\\\n        hideProxy()\\\\\\\\n        # Step foward and backward to avoid viewport bugs\\\\\\\\n        mel.eval ('playButtonStepForward')\\\\\\\\n        mel.eval ('playButtonStepBackward')\\\\\\\\n        \\\\\\\\n        cmds.refresh(suspend=False)\\\\\\\\n        \\\\\\\\n        print ('Normal Mode'),\\\\\\\\n    else:\\\\\\\\n                    # Proxymode\\\\\\\\n        \\\\\\\\n        cmds.refresh(suspend=True)\\\\\\\\n        \\\\\\\\n        cmds.setAttr (FolderProxy + \\\\\\\\\\\\\\\".visibility\\\\\\\\\\\\\\\", 1)\\\\\\\\n        showProxy()\\\\\\\\n        # Step foward and backward to avoid viewport bugs\\\\\\\\n        mel.eval ('playButtonStepForward')\\\\\\\\n        mel.eval ('playButtonStepBackward')\\\\\\\\n        \\\\\\\\n        cmds.refresh(suspend=False)\\\\\\\\n        \\\\\\\\n        print ('Proxy Mode'),\\\\\\\\n           \\\\\\\\n####################\\\\\\\\n     \\\\\\\\ndef getProxySelected():\\\\\\\\n    global Set_Normal, Excluded_Nodes, FolderProxy, namespaceRef, Set_Frozen\\\\\\\\n    \\\\\\\\n    # If the current selection is more than one it look for a new proxy, if is not\\\\\\\\n    # it will switching between your last selection\\\\\\\\n    if len(currentSelProxy) > 0:\\\\\\\\n        # Query namespace\\\\\\\\n        namespaceRef = cmds.referenceQuery( currentSelProxy[0], referenceNode=True )\\\\\\\\n    # Transform to String\\\\\\\\n    namespaceRef = ''.join([str(elem) for elem in namespaceRef]) \\\\\\\\n    # Remove RN and replace for :\\\\\\\\n    namespaceRef = namespaceRef.replace('RN', ':')\\\\\\\\n    # assigning new FolderProxy string\\\\\\\\n    FolderProxy = (namespaceRef + 'Folder_Proxys')\\\\\\\\n    # Assign Folder_Proxy, Set_Normal and Excluded_Nodes with the current Namespace Selected\\\\\\\\n    Set_Normal = ( namespaceRef + 'Set_Normal')\\\\\\\\n    Excluded_Nodes = ( namespaceRef + 'Excluded_Nodes')\\\\\\\\n    Set_Frozen = ( namespaceRef + 'Set_Frozen')\\\\\\\\n    cmds.select (cl=True)\\\\\\\\n    \\\\\\\\n####################\\\\\\\\n\\\\\\\\ndef createHUD():\\\\\\\\n    try:\\\\\\\\n        if cmds.objExists('Folder_Proxys'):\\\\\\\\n            if cmds.headsUpDisplay (\\\\\\\\\\\\\\\"HUDProxy\\\\\\\\\\\\\\\", exists=True, q=True) == 0:\\\\\\\\n                cmds.headsUpDisplay (\\\\\\\\\\\\\\\"HUDProxy\\\\\\\\\\\\\\\", label=\\\\\\\\\\\\\\\"Proxy\\\\\\\\\\\\\\\", labelFontSize=\\\\\\\\\\\\\\\"large\\\\\\\\\\\\\\\", section=2, block=4)\\\\\\\\n            if cmds.getAttr (\\\\\\\\\\\\\\\"Folder_Proxys.visibility\\\\\\\\\\\\\\\") == 1:\\\\\\\\n                cmds.headsUpDisplay (\\\\\\\\\\\\\\\"HUDProxy\\\\\\\\\\\\\\\", edit=True, visible=1)\\\\\\\\n            else:\\\\\\\\n                cmds.headsUpDisplay (\\\\\\\\\\\\\\\"HUDProxy\\\\\\\\\\\\\\\", edit=True, visible=0)\\\\\\\\n        else:\\\\\\\\n            cmds.headsUpDisplay (\\\\\\\\\\\\\\\"HUDProxy\\\\\\\\\\\\\\\", edit=True, visible=0)        \\\\\\\\n    except:\\\\\\\\n        cmds.warning (\\\\\\\\\\\\\\\"Couldn't create HUD\\\\\\\\\\\\\\\")\\\\\\\")\\\\n    toggleButton()\\\"  \\n        -sourceType \\\"python\\\" \\n        -commandRepeatable 1\\n        -flat 1\\n    ;\\n\\nglobal proc asInstallScriptFCMHider(){}\\n\\nglobal proc string asInstallScriptLocation ()\\n{\\nstring $whatIs=`whatIs asInstallScriptFCMHider`;\\nstring $fullPath=`substring $whatIs 25 999`;\\nstring $buffer[];\\nint $numTok=`tokenize $fullPath \\\"/\\\" $buffer`;\\nint $numLetters=size($fullPath);\\nint $numLettersLastFolder=size($buffer[$numTok-1]);\\nstring $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;\\nreturn $scriptLocation;\\n}\\n\\n\\n\\n\" )\n    print('Shelf Button Added'),\n    \n\n''' # Current Method: It needs to be written in Python\nstring $srcWindows=`asInstallScriptLocation`;\nstring $destWindows = `internalVar -userScriptDir`;\nstring $scriptIconFile = \"FCM_Proxy_Maker_Logo.png\";\n\n\nglobal string $gShelfTopLevel;\nstring $currentShelf = `tabLayout -query -selectTab $gShelfTopLevel`;\nsetParent $currentShelf;\nstring $icon=$destWindows+$scriptIconFile;\n\nsysFile -makeDir ($destWindows);\nsysFile -copy $icon ($srcWindows);\n\n    shelfButton\n        -enableCommandRepeat 1\n        -enable 1\n        -width 35\n        -height 35\n        -manage 1\n        -visible 1\n        -preventOverride 0\n        -annotation \"FCM_Proxy_Maker\" \n        -enableBackground 0\n        -highlightColor 0.321569 0.521569 0.65098 \n        -align \"center\" \n        -labelOffset 0\n        -rotation 0\n        -flipX 0\n        -flipY 0\n        -imageOverlayLabel \"Toggle\"\n        -useAlpha 1\n        -font \"plainLabelFont\" \n        -overlayLabelColor 0.8 0.8 0.8 \n        -overlayLabelBackColor 0 0 0 0.5 \n        -image \"absolute.png\" \n        -image1 \"absolute.png\" \n        -style \"iconOnly\" \n        -marginWidth 1\n        -marginHeight 1\n        -command \"try:\\n    toggleButton()\\nexcept:\\n    cmds.python(\\\"\\\\ndef toggleButton():\\\\n    global Set_Normal, Excluded_Nodes, FolderProxy, currentSelProxy, Set_Frozen\\\\n    # if there a Folder Proxy    \\\\n    try:\\\\n        currentSelProxy = cmds.ls (sl=True)\\\\n        # if there is a proxy in the scene prioritize that one\\\\n        if cmds.objExists (\\\\\\\"Folder_Proxys\\\\\\\"):\\\\n            FolderProxy = 'Folder_Proxys'\\\\n            Set_Normal = 'Set_Normal'\\\\n            Excluded_Nodes = 'Excluded_Nodes'\\\\n            Set_Frozen = 'Set_Frozen'\\\\n            toggleProxy()\\\\n            cmds.select (currentSelProxy) \\\\n        else:\\\\n            cmds.select (\\\\\\\"*:*Folder_Proxys\\\\\\\")\\\\n            nFolderP = cmds.ls (sl=True)\\\\n            cmds.select (cl=True)\\\\n            # if there is more Folder proxys than one \\\\n            if len(nFolderP) > 1:\\\\n                getProxySelected()\\\\n                toggleProxy()\\\\n                cmds.select (currentSelProxy)\\\\n            else:\\\\n                FolderProxy = '*:*Folder_Proxys'\\\\n                Set_Normal = '*:*Set_Normal'\\\\n                Excluded_Nodes = '*:*Excluded_Nodes'\\\\n                Set_Frozen = '*:*Set_Frozen'\\\\n                toggleProxy()\\\\n                cmds.select (currentSelProxy)\\\\n                \\\\n    # If there isn't a Folder Proxy      \\\\n    except:\\\\n        cmds.warning(\\\\\\\"No Proxys found\\\\\\\\n\\\\\\\")\\\\n        try:\\\\n            cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=0)\\\\n        except:\\\\n            cmds.warning(\\\\\\\"No Proxys found\\\\\\\\n\\\\\\\"),\\\\n            \\\\n            # ShowProxy def\\\\ndef showProxy():\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen\\\\n    sel = cmds.ls (sl=True)\\\\n    ###############\\\\n    if cmds.objExists (Set_Normal):\\\\n        cmds.select (Set_Normal)\\\\n    allContentSetNormal = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentSetNormal:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".visibility\\\\\\\", 0)\\\\n        except:\\\\n            cmds.setAttr (obj + \\\\\\\".lodVisibility\\\\\\\", 0)\\\\n    ###############\\\\n    if cmds.objExists (Excluded_Nodes):\\\\n        cmds.select (Excluded_Nodes)\\\\n    allContentExcludedNodes = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentExcludedNodes:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".nodeState\\\\\\\", 1)\\\\n        except:\\\\n            pass\\\\n\\\\n    ###############\\\\n    if cmds.objExists (Set_Frozen):\\\\n        cmds.select (Set_Frozen)\\\\n        allContentSetFrozen = cmds.ls(sl=True)\\\\n        \\\\n    if len(allContentSetFrozen) > 0:\\\\n    \\\\n        for obj in allContentSetFrozen:\\\\n            try:\\\\n                cmds.setAttr (obj + \\\\\\\".frozen\\\\\\\", 1)\\\\n            except:\\\\n                pass\\\\n        # Downstream Freeze Mode = 'Always'\\\\n        cmds.freezeOptions( explicitPropagation=True )\\\\n        cmds.freezeOptions( downstream='force' )\\\\n    ###############             \\\\n    createHUD()\\\\n    cmds.select (sel)\\\\n\\\\n            # HideProxy def\\\\ndef hideProxy():\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen\\\\n    sel = cmds.ls (sl=True)\\\\n    ###############\\\\n    if cmds.objExists (Set_Normal):\\\\n        cmds.select (Set_Normal)\\\\n    \\\\n    allContentSetNormal = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentSetNormal:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".visibility\\\\\\\", 1)\\\\n        except:\\\\n            cmds.setAttr (obj + \\\\\\\".lodVisibility\\\\\\\", 1)\\\\n    ###############\\\\n    if cmds.objExists (Excluded_Nodes):\\\\n        cmds.select (Excluded_Nodes)\\\\n    allContentExcludedNodes = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentExcludedNodes:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".nodeState\\\\\\\", 0)\\\\n        except:\\\\n            pass\\\\n    ###############\\\\n    if cmds.objExists (Set_Frozen):\\\\n        cmds.select (Set_Frozen)\\\\n        allContentSetFrozen = cmds.ls(sl=True)\\\\n        \\\\n        if len(allContentSetFrozen) > 0:\\\\n        \\\\n            for obj in allContentSetFrozen:\\\\n                try:\\\\n                    cmds.setAttr (obj + \\\\\\\".frozen\\\\\\\", 0)\\\\n                except:\\\\n                    pass\\\\n            # Downstream Freeze Mode = 'Always'\\\\n            cmds.freezeOptions( explicitPropagation=False )\\\\n            cmds.freezeOptions( downstream='none' )\\\\n\\\\n    ###############      \\\\n    createHUD()\\\\n    cmds.select (sel)\\\\n\\\\n####################\\\\n\\\\ndef toggleProxy():\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen, FolderProxy\\\\n    createHUD()\\\\n    if cmds.getAttr ( FolderProxy + \\\\\\\".visibility\\\\\\\") == 1:  \\\\n                    # Normal mode\\\\n        \\\\n        cmds.refresh(suspend=True)\\\\n        \\\\n        cmds.setAttr ( FolderProxy + \\\\\\\".visibility\\\\\\\", 0)\\\\n        hideProxy()\\\\n        # Step foward and backward to avoid viewport bugs\\\\n        mel.eval ('playButtonStepForward')\\\\n        mel.eval ('playButtonStepBackward')\\\\n        \\\\n        cmds.refresh(suspend=False)\\\\n        \\\\n        print ('Normal Mode'),\\\\n    else:\\\\n                    # Proxymode\\\\n        \\\\n        cmds.refresh(suspend=True)\\\\n        \\\\n        cmds.setAttr (FolderProxy + \\\\\\\".visibility\\\\\\\", 1)\\\\n        showProxy()\\\\n        # Step foward and backward to avoid viewport bugs\\\\n        mel.eval ('playButtonStepForward')\\\\n        mel.eval ('playButtonStepBackward')\\\\n        \\\\n        cmds.refresh(suspend=False)\\\\n        \\\\n        print ('Proxy Mode'),\\\\n           \\\\n####################\\\\n     \\\\ndef getProxySelected():\\\\n    global Set_Normal, Excluded_Nodes, FolderProxy, namespaceRef, Set_Frozen\\\\n    \\\\n    # If the current selection is more than one it look for a new proxy, if is not\\\\n    # it will switching between your last selection\\\\n    if len(currentSelProxy) > 0:\\\\n        # Query namespace\\\\n        namespaceRef = cmds.referenceQuery( currentSelProxy[0], referenceNode=True )\\\\n    # Transform to String\\\\n    namespaceRef = ''.join([str(elem) for elem in namespaceRef]) \\\\n    # Remove RN and replace for :\\\\n    namespaceRef = namespaceRef.replace('RN', ':')\\\\n    # assigning new FolderProxy string\\\\n    FolderProxy = (namespaceRef + 'Folder_Proxys')\\\\n    # Assign Folder_Proxy, Set_Normal and Excluded_Nodes with the current Namespace Selected\\\\n    Set_Normal = ( namespaceRef + 'Set_Normal')\\\\n    Excluded_Nodes = ( namespaceRef + 'Excluded_Nodes')\\\\n    Set_Frozen = ( namespaceRef + 'Set_Frozen')\\\\n    cmds.select (cl=True)\\\\n    \\\\n####################\\\\n\\\\ndef createHUD():\\\\n    try:\\\\n        if cmds.objExists('Folder_Proxys'):\\\\n            if cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", exists=True, q=True) == 0:\\\\n                cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", label=\\\\\\\"Proxy\\\\\\\", labelFontSize=\\\\\\\"large\\\\\\\", section=2, block=4)\\\\n            if cmds.getAttr (\\\\\\\"Folder_Proxys.visibility\\\\\\\") == 1:\\\\n                cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=1)\\\\n            else:\\\\n                cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=0)\\\\n        else:\\\\n            cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=0)        \\\\n    except:\\\\n        cmds.warning (\\\\\\\"Couldn't create HUD\\\\\\\")\\\")\\n    toggleButton()\"  \n        -sourceType \"python\" \n        -commandRepeatable 1\n        -flat 1\n    ;\n\nglobal proc asInstallScriptFCMHider(){}\n\nglobal proc string asInstallScriptLocation ()\n{\nstring $whatIs=`whatIs asInstallScriptFCMHider`;\nstring $fullPath=`substring $whatIs 25 999`;\nstring $buffer[];\nint $numTok=`tokenize $fullPath \"/\" $buffer`;\nint $numLetters=size($fullPath);\nint $numLettersLastFolder=size($buffer[$numTok-1]);\nstring $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;\nreturn $scriptLocation;\n}\n'''\n##############################\n''' # Old Method: is in python but create a new shelf tab instead of adding it in the current shelf\nshelfName='Proxy_Maker'\nmel.eval('global string $gShelfTopLevel;')\nmainShelfLayout=mel.eval('$tmp=$gShelfTopLevel;')\nif cmds.shelfLayout(shelfName,exists=True):\n    mel.eval('deleteShelfTab \"%s\";' % shelfName)\n#add new tab\ncreatedShelf=mel.eval('addNewShelfTab \"%s\";'%shelfName)\ncmds.shelfButton(\n    image1='commandButton.png', imageOverlayLabel='Toggle',\n    c=\"try:\\n    toggleButton()\\nexcept:\\n    cmds.python(\\\"\\\\ndef toggleButton():\\\\n    global Set_Normal, Excluded_Nodes, FolderProxy, currentSelProxy, Set_Frozen\\\\n    # if there a Folder Proxy    \\\\n    try:\\\\n        currentSelProxy = cmds.ls (sl=True)\\\\n        # if there is a proxy in the scene prioritize that one\\\\n        if cmds.objExists (\\\\\\\"Folder_Proxys\\\\\\\"):\\\\n            FolderProxy = 'Folder_Proxys'\\\\n            Set_Normal = 'Set_Normal'\\\\n            Excluded_Nodes = 'Excluded_Nodes'\\\\n            Set_Frozen = 'Set_Frozen'\\\\n            toggleProxy()\\\\n            cmds.select (currentSelProxy) \\\\n        else:\\\\n            cmds.select (\\\\\\\"*:*Folder_Proxys\\\\\\\")\\\\n            nFolderP = cmds.ls (sl=True)\\\\n            cmds.select (cl=True)\\\\n            # if there is more Folder proxys than one \\\\n            if len(nFolderP) > 1:\\\\n                getProxySelected()\\\\n                toggleProxy()\\\\n                cmds.select (currentSelProxy)\\\\n            else:\\\\n                FolderProxy = '*:*Folder_Proxys'\\\\n                Set_Normal = '*:*Set_Normal'\\\\n                Excluded_Nodes = '*:*Excluded_Nodes'\\\\n                Set_Frozen = '*:*Set_Frozen'\\\\n                toggleProxy()\\\\n                cmds.select (currentSelProxy)\\\\n                \\\\n    # If there isn't a Folder Proxy      \\\\n    except:\\\\n        cmds.warning(\\\\\\\"No Proxys found\\\\\\\\n\\\\\\\")\\\\n        try:\\\\n            cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=0)\\\\n        except:\\\\n            cmds.warning(\\\\\\\"No Proxys found\\\\\\\\n\\\\\\\"),\\\\n            \\\\n            # ShowProxy def\\\\ndef showProxy():\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen\\\\n    sel = cmds.ls (sl=True)\\\\n    ###############\\\\n    if cmds.objExists (Set_Normal):\\\\n        cmds.select (Set_Normal)\\\\n    allContentSetNormal = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentSetNormal:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".visibility\\\\\\\", 0)\\\\n        except:\\\\n            cmds.setAttr (obj + \\\\\\\".lodVisibility\\\\\\\", 0)\\\\n    ###############\\\\n    if cmds.objExists (Excluded_Nodes):\\\\n        cmds.select (Excluded_Nodes)\\\\n    allContentExcludedNodes = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentExcludedNodes:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".nodeState\\\\\\\", 1)\\\\n        except:\\\\n            pass\\\\n\\\\n    ###############\\\\n    if cmds.objExists (Set_Frozen):\\\\n        cmds.select (Set_Frozen)\\\\n        allContentSetFrozen = cmds.ls(sl=True)\\\\n        \\\\n    if len(allContentSetFrozen) > 0:\\\\n    \\\\n        for obj in allContentSetFrozen:\\\\n            try:\\\\n                cmds.setAttr (obj + \\\\\\\".frozen\\\\\\\", 1)\\\\n            except:\\\\n                pass\\\\n        # Downstream Freeze Mode = 'Always'\\\\n        cmds.freezeOptions( explicitPropagation=True )\\\\n        cmds.freezeOptions( downstream='force' )\\\\n    ###############             \\\\n    createHUD()\\\\n    cmds.select (sel)\\\\n\\\\n            # HideProxy def\\\\ndef hideProxy():\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen\\\\n    sel = cmds.ls (sl=True)\\\\n    ###############\\\\n    if cmds.objExists (Set_Normal):\\\\n        cmds.select (Set_Normal)\\\\n    \\\\n    allContentSetNormal = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentSetNormal:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".visibility\\\\\\\", 1)\\\\n        except:\\\\n            cmds.setAttr (obj + \\\\\\\".lodVisibility\\\\\\\", 1)\\\\n    ###############\\\\n    if cmds.objExists (Excluded_Nodes):\\\\n        cmds.select (Excluded_Nodes)\\\\n    allContentExcludedNodes = cmds.ls (sl=True)\\\\n    \\\\n    for obj in allContentExcludedNodes:\\\\n        try:\\\\n            cmds.setAttr (obj + \\\\\\\".nodeState\\\\\\\", 0)\\\\n        except:\\\\n            pass\\\\n    ###############\\\\n    if cmds.objExists (Set_Frozen):\\\\n        cmds.select (Set_Frozen)\\\\n        allContentSetFrozen = cmds.ls(sl=True)\\\\n        \\\\n        if len(allContentSetFrozen) > 0:\\\\n        \\\\n            for obj in allContentSetFrozen:\\\\n                try:\\\\n                    cmds.setAttr (obj + \\\\\\\".frozen\\\\\\\", 0)\\\\n                except:\\\\n                    pass\\\\n            # Downstream Freeze Mode = 'Always'\\\\n            cmds.freezeOptions( explicitPropagation=False )\\\\n            cmds.freezeOptions( downstream='none' )\\\\n\\\\n    ###############      \\\\n    createHUD()\\\\n    cmds.select (sel)\\\\n\\\\n####################\\\\n\\\\ndef toggleProxy():\\\\n    global Set_Normal, Excluded_Nodes, Set_Frozen, FolderProxy\\\\n    createHUD()\\\\n    if cmds.getAttr ( FolderProxy + \\\\\\\".visibility\\\\\\\") == 1:  \\\\n                    # Normal mode\\\\n        \\\\n        cmds.refresh(suspend=True)\\\\n        \\\\n        cmds.setAttr ( FolderProxy + \\\\\\\".visibility\\\\\\\", 0)\\\\n        hideProxy()\\\\n        # Step foward and backward to avoid viewport bugs\\\\n        mel.eval ('playButtonStepForward')\\\\n        mel.eval ('playButtonStepBackward')\\\\n        \\\\n        cmds.refresh(suspend=False)\\\\n        \\\\n        print ('Normal Mode'),\\\\n    else:\\\\n                    # Proxymode\\\\n        \\\\n        cmds.refresh(suspend=True)\\\\n        \\\\n        cmds.setAttr (FolderProxy + \\\\\\\".visibility\\\\\\\", 1)\\\\n        showProxy()\\\\n        # Step foward and backward to avoid viewport bugs\\\\n        mel.eval ('playButtonStepForward')\\\\n        mel.eval ('playButtonStepBackward')\\\\n        \\\\n        cmds.refresh(suspend=False)\\\\n        \\\\n        print ('Proxy Mode'),\\\\n           \\\\n####################\\\\n     \\\\ndef getProxySelected():\\\\n    global Set_Normal, Excluded_Nodes, FolderProxy, namespaceRef, Set_Frozen\\\\n    \\\\n    # If the current selection is more than one it look for a new proxy, if is not\\\\n    # it will switching between your last selection\\\\n    if len(currentSelProxy) > 0:\\\\n        # Query namespace\\\\n        namespaceRef = cmds.referenceQuery( currentSelProxy[0], referenceNode=True )\\\\n    # Transform to String\\\\n    namespaceRef = ''.join([str(elem) for elem in namespaceRef]) \\\\n    # Remove RN and replace for :\\\\n    namespaceRef = namespaceRef.replace('RN', ':')\\\\n    # assigning new FolderProxy string\\\\n    FolderProxy = (namespaceRef + 'Folder_Proxys')\\\\n    # Assign Folder_Proxy, Set_Normal and Excluded_Nodes with the current Namespace Selected\\\\n    Set_Normal = ( namespaceRef + 'Set_Normal')\\\\n    Excluded_Nodes = ( namespaceRef + 'Excluded_Nodes')\\\\n    Set_Frozen = ( namespaceRef + 'Set_Frozen')\\\\n    cmds.select (cl=True)\\\\n    \\\\n####################\\\\n\\\\ndef createHUD():\\\\n    try:\\\\n        if cmds.objExists('Folder_Proxys'):\\\\n            if cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", exists=True, q=True) == 0:\\\\n                cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", label=\\\\\\\"Proxy\\\\\\\", labelFontSize=\\\\\\\"large\\\\\\\", section=2, block=4)\\\\n            if cmds.getAttr (\\\\\\\"Folder_Proxys.visibility\\\\\\\") == 1:\\\\n                cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=1)\\\\n            else:\\\\n                cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=0)\\\\n        else:\\\\n            cmds.headsUpDisplay (\\\\\\\"HUDProxy\\\\\\\", edit=True, visible=0)        \\\\n    except:\\\\n        cmds.warning (\\\\\\\"Couldn't create HUD\\\\\\\")\\\")\\n    toggleButton()\"  ,\n    parent=createdShelf \n    )\n'''\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Settings def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n# Create Group with settings by default\ndef createSettings():\n    if cmds.objExists ('FCM_Proxy_Maker_Settings') == 0:\n        sel = cmds.ls (sl=True)\n        cmds.group (em=True, n= 'FCM_Proxy_Maker_Settings')\n        cmds.setAttr (\".tx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".ty\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".tz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".rx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".ry\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".rz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sy\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".v\", lock=True, keyable=False, channelBox=False )\n        # Create Option 1 Vis\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='Option_1_Vis',at='bool', dv=True, keyable=True)\n        # Create Option 2 Vis\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='Option_2_Vis',at='bool', dv=False, keyable=True)\n        # Create Deform Manager Vis\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='deformManager_Vis',at='bool', dv=False, keyable=True)\n        # Create Save After Loading\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='Save_After_Loading',at='bool', dv=False, keyable=True)\n\n        # Sanity Check\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='sanityCheck_FrameRate', at='enum', en=\"Waiting:Answered\", keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='sanityCheck_SmoothMeshPreview', at='enum', en=\"Waiting:Answered\", keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='sanityCheck_UpdateView', at='enum', en=\"Waiting:Answered\", keyable=True)\n        # Deform manager\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='HeavyMeshConnected_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='blendShape_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='wire_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='wrap_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='polySmoothFace_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='deltaMush_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='ffd_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='tension_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='polySoftEdge_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='polyMapCut_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='polyTweakUV_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='polyPlanarProj_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='skinCluster_State', at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Proxy_Maker_Settings', ln='cluster_State', at='bool', dv=True, keyable=True)\n\n\n        cmds.select (sel)\n\n        \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Create Groups and Sets def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef createGroupsAndSets():\n    if cmds.objExists (\"Folder_Proxys\") == 0:\n        cmds.group (em=True, name=\"Folder_Proxys\")\n        cmds.select (cl=True)\n    if cmds.objExists (\"Set_Normal\") == 0:\n        cmds.sets (em=True, name=\"Set_Normal\")\n        cmds.select (cl=True)\n    if cmds.objExists (\"Excluded_Nodes\") == 0:\n        cmds.sets (em=True, name=\"Excluded_Nodes\")\n        cmds.select (cl=True)\n    if cmds.objExists (\"Set_Proxy\") == 0:\n        cmds.sets (em=True, name=\"Set_Proxy\")\n        cmds.select (cl=True)\n    if cmds.objExists (\"Set_Frozen\") == 0:\n        cmds.sets (em=True, name=\"Set_Frozen\")\n        cmds.select (cl=True)\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Sanity Check def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef sanityCheck():\n    sanityCheckFrameRate()\n    sanityCheckEvaluationMode()\n    sanityCheckSmoothMeshPreview()\n    sanityCheckUpdateView()\n\n#====##====##====##====#\ndef sanityCheckUpdateView():\n    # If is waiting\n    if cmds.getAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_UpdateView\") == 0:\n        if cmds.playbackOptions (q=True, v=True) == \"all\":\n            result = cmds.confirmDialog ( title='Sanity check Update View', \n            message= \"Update View is set as \\\"All\\\"\\n\\nI have two reason for setting it as \\\"Active\\\":\\n-You can earn more FPS\\n-You will fix an awful bug for the FPS HUD\\n\\nThis will only update your current viewport\\n\\nDo you want to switch to \\\"Active\\\"?\" , \n            button = ['Yes', 'No'], cancelButton='No' )\n            \n            if result == 'Yes':\n                cmds.playbackOptions (v='active')\n                cmds.checkBoxGrp (\"HUDFrameRate\", edit=True, value2=True)\n                print ( 'Update view set to \"Active\"') ,\n            # Save response\n            cmds.setAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_UpdateView\", 1)\n            \n#====##====##====##====#\n# WIP!\n# haciendo un segundo checkeo si no pudo switchear a parallel\n# todavia necesita crear un atributo que checkee si esto fue asi tiene q hacer por cada session \n# el cambio a evaluation mode everything\n\n\ndef sanityCheckEvaluationMode():\n    \n    # if is true is in DG\n    if cmds.evaluationManager (q=True, enabled=True) == 0:\n        result = cmds.confirmDialog ( title='Sanity check Evaluation Mode', message= 'Evaluation mode is in \"DG\"\\nAll the rigs usually works much faster with this tool in \"Parallel\" Evaluation\\nDo you want to switch to Parallel?', \n        button = ['Yes', 'No'], cancelButton='No' )\n        \n        if result == 'Yes':\n            cmds.evaluationManager (mode='parallel')\n            print ( 'Evaluation mode set to \"Parallel\"') ,\n            ################################################\n            # If there is something that disable parallel it will pop up another confirm dialog\n            if cmds.evaluationManager (q=True, enabled=True) == 0:\n                result = cmds.confirmDialog ( title=\"Evaluation Mode can't change to parallel\", message='Probably some node or expresion is blocking parallel evaluation\\nThis setting can make unstable the maya session. But give it a try!\\nDo you want to switch to parallel?\\n', \n                button = ['Yes!', 'Nop, I am not that kind of adventurous person'], cancelButton='No' )\n                \n                if result == 'Yes!':\n                    setDynamicsMode_To_Everything()\n                    # Save response\n                if result == 'Nop, I am not that kind of adventurous person':\n                    pass\n                    # Save response\n \ndef setDynamicsMode_To_Everything():\n    cmds.evaluator (name='dynamics', c=\"disablingNodes=none\")\n    cmds.evaluator (name='dynamics', c=\"handledNodes=dynamics\")\n    cmds.evaluator (name='dynamics', c=\"action=evaluate\")\n\n        \n            \n#====##====##====##====#\n# Check if some mesh in the scene has active the smooth mesh preview\ndef sanityCheckSmoothMeshPreview():\n    if cmds.getAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_SmoothMeshPreview\") == 0:\n        allShapeMeshes = cmds.ls (type=\"mesh\")\n        for mesh in allShapeMeshes:\n            if cmds.getAttr (mesh + \".displaySmoothMesh\" ) == 2:\n                if cmds.getAttr (mesh + \".smoothLevel\" ) == 1:\n                    pass\n                else:\n                    result = cmds.confirmDialog ( title='Sanity check Smooth Mesh Preview', message= (str(mesh) + ' has smooth mesh preview on with subdivision level 2\\nThis may slowdown your playback, do you want to turn it off?'), \n                    button = ['Yes to all', 'No to all' , 'Yes', 'No'], cancelButton='No' )\n                    \n                    if result == 'Yes':\n                        cmds.setAttr (mesh + \".displaySmoothMesh\", 0 )\n                        print ( (str(mesh) + ' Smooth Mesh preview turned Off') ), \n                    if result == 'Yes to all':\n                        # Aca necesita meter en lista todos los meshes q esten con sub level 2 o 3 pero no 1\n                        for mesh in allShapeMeshes:\n                            cmds.setAttr (mesh + \".displaySmoothMesh\", 0 )\n                    if result == 'No to all':\n                        # Save response\n                        cmds.setAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_SmoothMeshPreview\", 1)\n                        sys.exit('user cancelled')\n                    # Save response\n                    cmds.setAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_SmoothMeshPreview\", 1)\n#====##====##====##====#\n# Check if FPS hud display is active\ndef sanityCheckFrameRate():\n    if cmds.getAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_FrameRate\") == 0:\n        if maya.mel.eval ('optionVar -q frameRateVisibility') == 0l:\n            result = cmds.confirmDialog ( title='Sanity check FCM_Proxy_Maker', message='FPS HUD visibility is OFF\\nThis is a useful function for testing the speed plaback of your rig\\nDo you want to turn it on?', \n            button = ['Yes','No'], cancelButton='No' )\n            \n            if result == 'Yes':\n                maya.mel.eval ('setFrameRateVisibility 1')\n                cmds.checkBoxGrp (\"HUDFrameRate\", edit=True, value1=True)\n                print ('FPS HUD active'), \n            # Save response\n            cmds.setAttr (\"FCM_Proxy_Maker_Settings.sanityCheck_FrameRate\", 1)\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    Deform Manager Functions\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n# This function needs declare variables before run, they declare in the button just before run the function\ndef turnonOrOffAllDeform():\n    global nodeName\n    # Checkboxes\n    cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value1=TrueOrFalse, value2=TrueOrFalse, value3=TrueOrFalse)\n    cmds.checkBoxGrp ('NodesCheckbox2', edit=True, value1=TrueOrFalse, value2=TrueOrFalse, value3=TrueOrFalse)\n    cmds.checkBoxGrp ('NodesCheckbox3', edit=True, value1=TrueOrFalse, value2=TrueOrFalse, value3=TrueOrFalse)\n    cmds.checkBoxGrp ('NodesCheckbox4', edit=True, value1=TrueOrFalse, value2=TrueOrFalse, value3=TrueOrFalse)\n    #cmds.checkBoxGrp ('NodesCheckbox5', edit=True, value1=TrueOrFalse)\n    # Heavy Meshes\n    \n    \n    # Turn off nodes\n    nodeName = 'blendShape'; nodesOnorOff()\n    nodeName = 'wrap'; nodesOnorOff()\n    nodeName = 'polySmoothFace'; nodesOnorOff()\n    nodeName = 'deltaMush'; nodesOnorOff()\n    nodeName = 'ffd'; nodesOnorOff()\n    nodeName = 'tension'; nodesOnorOff()\n    nodeName = 'polySoftEdge'; nodesOnorOff()\n    nodeName = 'wire'; nodesOnorOff()\n    nodeName = 'polyMapCut'; nodesOnorOff()\n    nodeName = 'polyTweakUV'; nodesOnorOff()\n    nodeName = 'polyPlanarProj'; nodesOnorOff()\n    #nodeName = 'skinCluster'; nodesOnorOff(); removeSkinClusterProxy_FromExcludedNodes()\n    # print\n    #print (printResult),\n    \n\ndef turnOffNodesManager():\n    global value, excludedValue, addedOrRemoved, nodeName\n    value=1\n    excludedValue='add'\n    addedOrRemoved = ' Excluded\\n'\n    deformManagerFunction()\n\ndef turnOnNodesManager():\n    global value, excludedValue, addedOrRemoved, nodeName\n    value=0\n    excludedValue='rm'\n    addedOrRemoved = ' Removed from exclusion\\n' \n    deformManagerFunction()\n\n################################################\n# If is in normal mode when you add the nodes they still are all on\n# If you add the nodes in proxy mode they will turn off\n# If you remove the nodes will always turn them on in both modes\n\ndef deformManagerFunction():\n    global nodeName, node\n    # Query Current sel, keep in mind if it wasn't nothing selected\n    currentSel = cmds.ls (sl=True)\n    # Create groups and sets\n    createGroupsAndSets()\n    # Query node\n    node = cmds.ls (type = nodeName) \n    # Add or remove nodeName to excluded set\n    if excludedValue == 'add':\n        cmds.sets (node, e=True, add='Excluded_Nodes')\n    # Create Settings\n    createSettings()\n    # Update node states and settings\n    if cmds.getAttr ('Folder_Proxys.visibility') == 1:\n        cmds.setAttr (\"FCM_Proxy_Maker_Settings\" + (\".\" + str(nodeName) + '_State'), 0)\n        for obj in node:\n            try:\n                cmds.setAttr (obj + \".nodeState\", value)\n            except:\n                pass\n\n    else:\n        cmds.setAttr (\"FCM_Proxy_Maker_Settings\" + (\".\" + str(nodeName) + '_State'), 1)\n        for obj in node:\n            try:\n                cmds.setAttr (obj + \".nodeState\", 0)\n            except:\n                pass\n\n    # If is en remove mode it will remove after turn them on\n    if excludedValue == 'rm':\n        cmds.sets (node, e=True, rm='Excluded_Nodes') \n        cmds.setAttr (\"FCM_Proxy_Maker_Settings\" + (\".\" + str(nodeName) + '_State'), 1) \n    # Create HUD\n    createHUD()\n    # Get number selection and print\n    print ( str(len(node)) + \" \" + str(nodeName) + str(addedOrRemoved)),\n    if len(currentSel) > 0:\n        cmds.select (currentSel)\n    else:\n        cmds.select (cl=True)\n        \n   \n################################################\ndef removeSkinClusterProxy_FromExcludedNodes():\n\n    # List all skinCluster\n    skinClusters = cmds.ls(type='skinCluster')\n    # Create Empty list\n    skinClusterProxys = []\n    # Add any mesh with '_Proxy' in the name in a new list\n    for mesh in skinClusters:\n        if \"_Proxy\" in mesh:\n            skinClusterProxys.append(mesh)\n    # Turn nodeState on\n    for mesh in skinClusterProxys:\n        cmds.setAttr (mesh + '.nodeState', 0)\n    # Remove from Exclude set\n    cmds.sets (skinClusterProxys, edit=True, rm='Excluded_Nodes')\n    # print\n    print (str(len(node)) +  \" \" + nodeName + \" Excluded\"),\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Heavy Meshes def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef addHeavyMesh_Set_Frozen():\n    global filteredMeshes, meshesShape\n    # Get current Sel\n    currentSel = cmds.ls(sl=True)\n    # Create groups, sets and settings\n    createGroupsAndSets()\n    createSettings()\n    # get shapes meshes from Set_Normal\n    if cmds.objExists('Set_Normal'):\n        shapesAndShapesOrig = cmds.ls (type='mesh')\n        meshes = cmds.filterExpand(shapesAndShapesOrig, sm= 12 )\n        cmds.select(meshes)\n        cmds.pickWalk (d='down')\n        meshesShape = cmds.ls ( sl=True)\n        cmds.select(cl=True)\n        ''' Option for only search in Set_Normal\n        cmds.select('Set_Normal')\n        cmds.pickWalk (d='down')\n        meshesShape = cmds.ls ( sl=True)\n        cmds.select(cl=True)\n        '''\n    else:\n        sys.exit('First you need to create all the proxys')\n    # Filter meshes\n    filterMeshes()\n    \n    # If filteredMeshes is empty just go for all the meshes in the scene\n    if len(filteredMeshes) == 0:\n        shapesAndShapesOrig = cmds.ls (type='mesh')\n        meshes = cmds.filterExpand(shapesAndShapesOrig, sm= 12 )\n        cmds.select(meshes)\n        cmds.pickWalk (d='down')\n        meshesShape = cmds.ls ( sl=True)\n        # Filter meshes \n        filterMeshes()\n   \n    # Add the filteredes meshes to Set_Frozen\n    cmds.sets (filteredMeshes, edit=True, add='Set_Frozen')\n    # Turn off checkbox\n    cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value1=False)\n    \n    \n    # Set attr for settings\n    cmds.setAttr('FCM_Proxy_Maker_Settings.HeavyMeshConnected_State', 0)\n    \n    if cmds.getAttr( FolderProxy + '.visibility') == 1:\n        # Go to Proxy mode\n        cmds.setAttr ( FolderProxy + \".visibility\", 1)\n        showProxy()\n        \n    # Current sel\n    cmds.select(currentSel)\n    # Print\n    print( str(len(filteredMeshes))+ ' Excluded' ),\n\n\ndef filterMeshes():\n    global filteredMeshes, meshesShape\n    # Create list\n    filteredMeshes = []\n    # Filter \n    for mesh in meshesShape:\n        connections_oM = cmds.listConnections( mesh + '.outMesh' )\n        connections_wM = cmds.listConnections( mesh + '.worldMesh[0]' )\n        try:\n            if len(connections_wM) > 0:\n                filteredMeshes.append(mesh) \n            else:\n                if len(connections_oM) > 0: \n                    filteredMeshes.append(mesh) \n        except:\n            pass\n\n\n       \ndef removeHeavyMesh_Set_Frozen():\n    # Get Current Sel\n    currentSel = cmds.ls(sl=True)\n    # Set attr for settings\n    cmds.setAttr('FCM_Proxy_Maker_Settings.HeavyMeshConnected_State', 1)\n    # Turn on checkbox\n    cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value1=True)\n    # Select all content of Set_Frozen, turn off frozen attribute\n    cmds.select(Set_Frozen)\n    frozenElements = cmds.ls(sl=True)\n    for f in frozenElements:\n        cmds.setAttr(f + '.frozen', 0)\n    # Downstream Freeze Mode = 'None'\n    cmds.freezeOptions( explicitPropagation=False )\n    cmds.freezeOptions( downstream='none' )\n    \n    \n    cmds.sets (filteredMeshes, edit=True, remove='Set_Frozen')\n    # current Sel\n    cmds.select(currentSel)\n    # Print\n    print( str(len(filteredMeshes))+ ' Removed from exclusion' ),\n   \n               \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Keep Original Rig Create Automatic Proxy def\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n    \n    \ndef createAutomaticProxy_KeepRig():\n    createSettings()\n    global TrueOrFalse, nodesOnorOff\n    # Select all visible Mesh\n    selectAllVisibleMeshes()\n    removeObjectsWithoutNameSpaces()\n\n    # Create Proxy \n    createProxySkinAlsoNonSkinned()\n    # Create proxy Exclude for all the non skinned meshes\n    cmds.select (Set_NoSkin_List)\n    createProxyExcluded()\n    # Set Proxy visible\n    hideorShowProxySet(value = 1)\n    cmds.checkBoxGrp (\"ShowProxy\", e=True, value1=True)\n    # If sel is equal to 0 means probably you are in the rig file\n    #cmds.ls(sl=True)\n    '''\n    if len(sel) == 0:\n        cmds.warning('Creating proxy for every visible mesh in the scene')\n        selectAllVisibleMeshes()\n        createProxy()\n    '''\n    # For deform manager only deactive HeavyMeshes\n    addHeavyMesh_Set_Frozen()\n    # Select clear\n    cmds.select (cl=True)\n\n    # Print\n    if len(Set_NoSkin_List) > 0:\n        print (str(len(Set_NoSkin_List)) + \" meshes were excluded because they don't have skinCluster to copy from\"),\n    else:\n        print (\"Automatic proxy was created successfully\"),\n\n\n    \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Delete Original Rig\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n\ndef removeAnnoyingWindows():\n    gMainWindow = []\n    allOpenWindows = cmds.lsUI (wnd=True)\n    # Remove two elements from the list\n    allOpenWindows.remove('MayaWindow')\n    allOpenWindows.remove('FCM_Proxy_Maker_Window')\n    try:\n        allOpenWindows.remove('progressWindowDelRig')\n    except:\n        pass\n        \n    for items in allOpenWindows:\n        if items != gMainWindow:\n            cmds.window (items, e=True, vis=0)\n  \ndef createAutomaticProxy():\n    global animationScene; global currentSel\n\n    # Get Current Selection\n    currentSel = cmds.ls (sl=True, long=True)\n    # Query Namespace and Reference Source\n    Query_Namespace_ReferenceSource()\n    # Create Automatic Proxy Reference \n    # Turn on suspend viewport\n    #cmds.refresh(suspend=True)\n\n    # Check if the file is saved\n\n    if cmds.file(q=True, modified=True):\n        \n        result = cmds.confirmDialog ( title='Window', message='You must save your file first', \n        button = ['Save','Cancel'], cancelButton='Cancel' )\n        try:    \n            if result == 'Save':\n                try:\n                    cmds.SaveScene()\n                    animationScene = cmds.file(q=True, sn=True)\n                except:\n                    maya.mel.eval(\"cleanUpScene 3\")\n                    cmds.SaveScene()\n                    animationScene = cmds.file(q=True, sn=True)\n                    \n            if result == 'Cancel':\n                sys.exit('Operation cancelled by user')\n        except:\n            cmds.warning('Error trying to save')\n            sys.exit('Error while saving, try deleting unknown nodes')  \n    else:\n        # Query Animation Scene \n        animationScene = cmds.file(q=True, sn=True)\n    # Progress Bar \n    if cmds.window (\"progressWindowDelRig\", exists=True):\n        cmds.deleteUI ('progressWindowDelRig')\n\n    window = cmds.window('progressWindowDelRig', title='Progress Window')\n    cmds.columnLayout( adjustableColumn=True )\n        \n    cmds.text('textDelRig', align='center')\n    progressControlDelRig = cmds.progressBar(maxValue=10, width=300, isInterruptable=True)\n            \n    cmds.showWindow (window)\n    cmds.window (\"progressWindowDelRig\", edit=True, w=300, h=35, topLeftCorner = [250,760])\n    # Progress bar Open Orig Rig\n    cmds.text('textDelRig', edit=True, label='Opening Original rig')\n    cmds.progressBar(progressControlDelRig, edit=True, step=2)\n    # Open Orig rig\n    cmds.file ( (sourceRef + extension), f=True, open=True, prompt=False )\n    # Progress Applying automatic Proxy\n    cmds.text('textDelRig', edit=True, label='Applying automatic Proxy')\n    cmds.progressBar(progressControlDelRig, edit=True, step=2)\n    # Remove prompt window\n    removeAnnoyingWindows()\n    # Select all visible meshes\n    selectAllVisibleMeshes()\n    # Create SkinCluster for all the meshes\n    list = cmds.ls (sl=True)\n    # Create Empty lists\n    Set_Skin_List = []\n    Set_NoSkin_List = []\n    # check if the items has skin or not and put them in temporary sets\n    for item in list:\n            checkSkin = (mel.eval('findRelatedSkinCluster '+item))\n            # if the result is less than 1 the mesh doesn't have skin\n            if len( checkSkin ) > 1:\n                Set_Skin_List.append(item)\n            else:\n                Set_NoSkin_List.append(item)\n    \n    cmds.select (Set_Skin_List)\n    createProxySkin()\n    \n    cmds.select (Set_NoSkin_List)\n    createProxyExcluded()\n\n    # Progress Bar Applying automatic Proxy\n    cmds.text('textDelRig', edit=True, label='Removing original Meshes')\n    cmds.progressBar(progressControlDelRig, edit=True, step=2)\n    # Remove all original meshes and remove both sets\n    delete_SetNormal_FromMinorToHighHistory()\n    cmds.delete('Set_Proxy', 'Excluded_Nodes')\n    # Progress Bar \n    cmds.text('textDelRig', edit=True, label='Saving project as \"_Proxy\"')\n    cmds.progressBar(progressControlDelRig, edit=True, step=2)\n    # Save Project as the same name plus \"_Proxy\"\n    cmds.file(rename= (sourceRef + \"_Proxy\") )\n    try:\n        cmds.file ( f=True, save=True)\n        # If trying to save cause an error optimice the scene deleting unkwown nodes and try again\n    except:\n        maya.mel.eval(\"cleanUpScene 3\")\n        cmds.file ( f=True, save=True)\n    # Go back to animation file with the reference\n    # Progress Bar \n    cmds.text('textDelRig', edit=True, label='Opening animation file')\n    cmds.progressBar(progressControlDelRig, edit=True, step=1)\n    cmds.file ( animationScene, f=True, open=True, prompt=False  )\n    # Turn off suspend viewport\n    #cmds.refresh(suspend=False)\n    # Progress Bar\n    cmds.text('textDelRig', edit=True, label='Loading Proxy Reference')\n    cmds.progressBar(progressControlDelRig, edit=True, step=1)\n    # Load Proxy Reference\n    cmds.select (currentSel)\n    cmds.file((sourceRef + '_Proxy' + extension), prompt=False , loadReference = namespaceRef)\n    # Switch to dg and then parallel to avoid crashes\n    cmds.evaluationManager (mode=\"off\")\n    cmds.evaluationManager (mode=\"parallel\")\n    # Turn off HUD Proxy\n    #cmds.headsUpDisplay (\"HUDProxy\", edit=True, visible=0)\n    # Progress Bar Closing \n    cmds.deleteUI ('progressWindowDelRig')\n    # Close all floating panel\n    removeAnnoyingWindows()\n    # Confirm dialog wich open again the window and print successfully result\n    result = cmds.confirmDialog( title='Window', message='Proxy File successfully created!', button=['Ok'])\n    if result == 'Ok':\n        print (\"Proxy file successfully created\"),\n############################################\n\ndef Query_Namespace_ReferenceSource():\n    global sourceRef; global sourceRefList; global namespaceRef; global extension\n\n    sel = cmds.ls ( sl=True )\n    if len(sel) == 0:\n        sys.exit('You must have an element of the rig selected')\n    # Query reference source \n    sourceRefList = cmds.referenceQuery( sel, filename=True, withoutCopyNumber=True )\n    # Query namespace\n    namespaceRef = cmds.referenceQuery( sel, referenceNode=True )\n    # Convert list to string\n    sourceRef = ''.join([str(elem) for elem in sourceRefList]) \n    # Query extension\n    extension = sourceRef[-3:]\n    # Delete .ma/.mb and _Proxy (if exists) From the string\n    sourceRef = sourceRef.replace('.ma', '')\n    sourceRef = sourceRef.replace('.mb', '')\n    sourceRef = sourceRef.replace('_Proxy', '')\n        \n##########\ndef loadProxyRef():\n    Query_Namespace_ReferenceSource()\n    currentSel = cmds.ls(sl=True)\n    cmds.file((sourceRef + '_Proxy' + extension), prompt=False, loadReference = namespaceRef)\n    # Check if Checkbox Save After Load is On\n    if cmds.checkBoxGrp (\"SaveAfterLoading\", query=True, value1=True) == 1:\n        cmds.SaveScene()\n    cmds.select(currentSel)\n    # Close all floating panel excepting Maya and the tool\n    removeAnnoyingWindows()\n    # For avoiding crashes (DG, step foward and backward, go back to parallel)\n    cmds.evaluationManager (mode=\"off\")\n    #maya.mel.eval('playButtonStepForward')\n    #maya.mel.eval('playButtonStepBackward')\n    cmds.evaluationManager (mode='parallel')\n    print ('Proxy Rig loaded'),\n\n        \ndef loadNormalRef():\n    currentSel = cmds.ls(sl=True)\n    Query_Namespace_ReferenceSource()\n    cmds.file((sourceRef + extension), prompt=False, loadReference = namespaceRef)\n    # Check if Checkbox Save After Load is On\n    if cmds.checkBoxGrp (\"SaveAfterLoading\", query=True, value1=True) == 1:\n        cmds.SaveScene()\n    cmds.select(currentSel)\n    # Close all floating panel\n    removeAnnoyingWindows()\n    # For avoiding crashes (DG, step foward and backward, go back to parallel)\n    cmds.evaluationManager (mode=\"off\")\n    #maya.mel.eval('playButtonStepForward')\n    #maya.mel.eval('playButtonStepBackward')\n    cmds.evaluationManager (mode='parallel')\n    # Print\n    print ('Normal Rig loaded'),\n\n        \ndef goToProxyRig():\n    Query_Namespace_ReferenceSource() \n    cmds.file ( (sourceRef + '_Proxy' + extension), prompt=False, f=True, open=True )\n    # Close all floating panel\n    removeAnnoyingWindows()\n    \ndef goToNormalRig():\n    Query_Namespace_ReferenceSource()\n    cmds.file ( (sourceRef + extension), prompt=False, f=True, open=True )\n    # Close all floating panel\n    removeAnnoyingWindows()\n\ndef delete_SetNormal_FromMinorToHighHistory():\n    cmds.select('Set_Normal')\n    meshes = cmds.ls (sl=True, long=True)\n    meshes = cmds.filterExpand(meshes, sm=12)\n\n    orderMeshes = []\n    for mesh in meshes:\n        \n        # query all the nodes\n        history = cmds.listHistory(mesh)\n        # transform nodes into numbers\n        numHistory = len(history)\n        # Pair numbers with single mesh\n        orderMeshes.append([numHistory, mesh])\n        # order minor to major\n        orderMeshes.sort()\n        \n    for item in orderMeshes:\n        try:\n            cmds.delete(item[1])\n        except:\n            pass\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n            Performance Window Manager\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef contactWindow():\n    # Contact Window\n    if cmds.window (\"FCM_Proxy_Maker_Contact\", exists=True ):\n        cmds.deleteUI (\"FCM_Proxy_Maker_Contact\")\n    windowProxyMaker = cmds.window (\"FCM_Proxy_Maker_Contact\", title=\"Contact\", s=False)\n    \n    \n    cmds.rowColumnLayout( numberOfColumns=2, columnAttach=(1, 'right', 0), columnWidth=[(1, 100), (2, 250)] )\n    cmds.text( label='Name:  ' )\n    name = cmds.textField(text='Francisco Cerchiara Montero', editable=True)\n    cmds.text( label='Email:  ' )\n    address = cmds.textField(text='FranCM127@hotmail.com', editable=True)\n    cmds.text( label='Facebook:  ' )\n    phoneNumber = cmds.textField(text='www.facebook.com/Fran127', editable=True)\n    cmds.text( label='Linked-In:  ' )\n    email = cmds.textField(text='www.linkedin.com/in/francm3danimator/', editable=True)\n    \n    #    Attach commands to pass focus to the next field if the Enter\n    #    key is pressed. Hitting just the Return key will keep focus\n    #    in the current field.\n    #\n    cmds.textField( name, edit=True, enterCommand=('cmds.setFocus(\\\"' + address + '\\\")') )\n    cmds.textField( address, edit=True, enterCommand=('cmds.setFocus(\\\"' + phoneNumber + '\\\")') )\n    cmds.textField( phoneNumber, edit=True, enterCommand=('cmds.setFocus(\\\"' + email + '\\\")') )\n    cmds.textField( email, edit=True, enterCommand=('cmds.setFocus(\\\"' + name + '\\\")') )\n    \n    cmds.showWindow( windowProxyMaker )\n\n##################\ndef Option_1_VisCollapse():\n    cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\n    if cmds.objExists ('FCM_Proxy_Maker_Settings'):\n        cmds.setAttr ('FCM_Proxy_Maker_Settings.Option_1_Vis', 0)\ndef Option_1_VisExpand():\n    cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\n    if cmds.objExists ('FCM_Proxy_Maker_Settings'):\n        cmds.setAttr ('FCM_Proxy_Maker_Settings.Option_1_Vis', 1)\n        \ndef Option_2_VisCollapse():\n    cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\n    if cmds.objExists ('FCM_Proxy_Maker_Settings'):\n        cmds.setAttr ('FCM_Proxy_Maker_Settings.Option_2_Vis', 0)\ndef Option_2_VisExpand():\n    cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\n    if cmds.objExists ('FCM_Proxy_Maker_Settings'):\n        cmds.setAttr ('FCM_Proxy_Maker_Settings.Option_2_Vis', 1)\n\ndef deformManager_VisCollapse():\n    cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\n    if cmds.objExists ('FCM_Proxy_Maker_Settings'):\n        cmds.setAttr ('FCM_Proxy_Maker_Settings.deformManager_Vis', 0)\ndef deformManager_VisExpand():\n    cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\n    if cmds.objExists ('FCM_Proxy_Maker_Settings'):\n        cmds.setAttr ('FCM_Proxy_Maker_Settings.deformManager_Vis', 1)\n##################\ndef DeleteProxy():\n    if cmds.radioButtonGrp (\"DeleteProxy\", q=True, sl=True) == 1:\n        DeleteSelected()\n    else:\n        deleteAllProxys()\n##################\ndef createProxy():\n    if cmds.optionMenuGrp(\"CreateProxyMenu\", q=True, v=True) == \"SkinCluster\":\n        createProxySkinAlsoNonSkinned()\n    if cmds.optionMenuGrp(\"CreateProxyMenu\", q=True, v=True) == \"Constraint\":\n        createProxyConstraint()\n    if cmds.optionMenuGrp(\"CreateProxyMenu\", q=True, v=True) == \"Exclude\":\n        createProxyExcluded()       \n##################\ndef oncommand1DelRig():\n        if cmds.objExists ('Folder_Proxys'):\n            cmds.setAttr ('Folder_Proxys.visibility', 1)\n            cmds.checkBoxGrp ('ShowProxy', edit=True, value1=1)\n        else:\n            cmds.warning('Proxys not found')\n            cmds.checkBoxGrp ('ShowProxy', edit=True, value1=1)\n    \ndef offcommand1DelRig():\n    if cmds.objExists ('Folder_Proxys'):\n        cmds.setAttr ('Folder_Proxys.visibility', 0)\n        cmds.checkBoxGrp ('ShowProxy', edit=True, value1=0)\n    else:\n        cmds.warning('Proxys not found')\n        cmds.checkBoxGrp ('ShowProxy', edit=True, value1=0)\n\n##################\ndef CreateProxyMenu_ChangeCommand():\n    if cmds.optionMenuGrp(\"CreateProxyMenu\", q=True, v=True) == \"SkinCluster\":\n        cmds.text ('nonskinnedMethodText', edit=True, enable=True)\n        cmds.radioButtonGrp ('nonSkinnedMethod', edit=True, enable=True)\n    cmds.button('createAutomaticProxyKeepRig', edit=True, enable=True)\n    if cmds.optionMenuGrp(\"CreateProxyMenu\", q=True, v=True) == \"Constraint\":\n        cmds.text ('nonskinnedMethodText', edit=True, enable=False)\n        cmds.radioButtonGrp ('nonSkinnedMethod', edit=True, enable=False)\n        cmds.button('createAutomaticProxyKeepRig', edit=True, enable=False)\n    if cmds.optionMenuGrp('CreateProxyMenu', q=True, v=True) == \"Exclude\":\n        cmds.text ('nonskinnedMethodText', edit=True, enable=False)\n        cmds.radioButtonGrp ('nonSkinnedMethod', edit=True, enable=False)\n        cmds.button('createAutomaticProxyKeepRig', edit=True, enable=False)\n    \n\n######################################################\n    \ndef ProxyMakerWindow():\n    \n    \n    global Set_Normal, Excluded_Nodes, FolderProxy, currentSelProxy, Set_Frozen\n    FolderProxy = 'Folder_Proxys'\n    Set_Normal = 'Set_Normal'\n    Excluded_Nodes = 'Excluded_Nodes'\n    Set_Frozen = 'Set_Frozen'\n    \n    \n    createSettings()\n    if cmds.window (\"FCM_Proxy_Maker_Window\", exists=True ):\n        cmds.deleteUI (\"FCM_Proxy_Maker_Window\")\n        \n    windowProxyMaker = cmds.window (\"FCM_Proxy_Maker_Window\", title=\"FCM_Proxy_Maker\", s=True, menuBar=True)\n    \n    # File\n    cmds.menu( label='File')\n    cmds.menuItem( label='Save Proxy', c=\"cmds.warning('WIP! Sorry')\" )\n    cmds.menuItem( label='Load Proxy', c=\"cmds.warning('WIP! Sorry')\" )\n    # Help\n    cmds.menu( label='Help' )\n    cmds.menuItem( l='Documentation', c=\"cmds.launch (web='https://docs.google.com/document/d/1fLz6TFs7I9M3hadDZHkl9t6L39NxBZDQbpCBvzdkAyY/edit?usp=sharing')\")\n    cmds.menuItem( l='Video Tutorials', c=\"cmds.launch (web='https://www.youtube.com/watch?v=LLtW3t1RfhI&list=PLME7GNNMRppKIg-1S2zB97kB3UzFFnFkc&index=2&t=0s')\")\n    cmds.menuItem( l='Contact', c=\"contactWindow()\")\n\n    # Version\n    cmds.menu( label= ('Version: ' + version), enable=False)\n    #cmds.menu( image='FCM_Proxy_Maker_Logo')\n    \n    cmds.columnLayout (adjustableColumn=True)\n    \n    heightButton = 31\n    columnAttach1 = 10\n    columnAttach2 = -25\n    widthButton = 116\n    \n\n\n    cmds.frameLayout ('proxyManagerTab', label=\"Proxy Manager\", marginHeight=7, marginWidth=7, collapse=False, collapsable=True,\n    collapseCommand = \"cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\",\n    expandCommand = \"cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\")\n\n\n\n    cmds.frameLayout ('keepOriginalRig', label=\"Option 1 (Keep Original Rig)\", marginHeight=7, marginWidth=7, collapse=False, collapsable=True,\n    collapseCommand = \"Option_1_VisCollapse(); cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\",\n    expandCommand = \"Option_1_VisExpand(); cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\")\n    \n    \n              \n    # Toggle Proxy\n    cmds.button (label=\"Toggle Proxy\", c=\"toggleButton()\", w=150, h=31)\n    cmds.popupMenu()\n    cmds.menuItem(l=\"Create Shelf button\", c=\"createShelfButton()\")\n    \n      \n    cmds.separator()\n    \n    #=============================================\n                # Proxy Manager \n                # FrameLayout Option 1\n    \n    '''\n    # Non skinned method \n    cmds.text('nonskinnedMethodText', label='Non skinned method:', align='center', ann=\"For all of those meshes who doesn't have SkinCluster\")\n    cmds.radioButtonGrp (\"nonSkinnedMethod\", numberOfRadioButtons=3, sl=1,\n    label1=\"Exclude\", label2=\"One Joint\", label3=\"Do Nothing\",\n    an1='Exclude all meshes with no skinCluster', \n    an2='Look the closest joint to the mesh and apply skincluster', \n    an3='Do nothing to the non skinned meshes, use it when you want to create custom constraint and exclude proxys', \n    onCommand1 = \"cmds.button ('createAutomaticProxyKeepRig', e=True, en=True)\",\n    onCommand2 = \"cmds.button ('createAutomaticProxyKeepRig', e=True, en=True)\",\n    onCommand3 = \"cmds.button ('createAutomaticProxyKeepRig', e=True, en=False)\",\n    columnWidth = [[1, 70], [2, 85], [3, 150]])\n     # this is the connection between option 1 and 2\n    #changeCommand1= \"cmds.radioButtonGrp ('nonSkinnedMethodDelOrigRig', edit=True, sl=1)\",\n    #changeCommand2= \"cmds.radioButtonGrp ('nonSkinnedMethodDelOrigRig', edit=True, sl=2)\",\n    #changeCommand3= \"cmds.radioButtonGrp ('nonSkinnedMethodDelOrigRig', edit=True, sl=3)\")\n    \n    '''\n    \n    # Create Automatic Proxy\n    cmds.button ('createAutomaticProxyKeepRig', l=\"Create Automatic Proxy\", w=widthButton, h=heightButton, c=\"createAutomaticProxy_KeepRig()\")\n    \n    \n    cmds.rowLayout (numberOfColumns=2)\n    \n    # Create Proxy\n    cmds.button (l=\"Create Proxy\", w=widthButton, h=heightButton, c=\"createProxy()\")\n    \n    \n    # Skin / Constraint / Exclude\n    cmds.optionMenuGrp(\"CreateProxyMenu\", columnAttach=[1, \"left\", 20])\n    # Turn value off for non skinned method when the control menutim \"Skincluster is Off\"\n    #changeCommand = 'CreateProxyMenu_ChangeCommand()')\n    cmds.menuItem( label='SkinCluster' )\n    cmds.menuItem( label='Constraint' )\n    cmds.menuItem( label='Exclude' )\n\n    \n    cmds.setParent(\"..\")\n    \n    cmds.rowLayout (numberOfColumns=2)\n    # Remove Proxy\n    cmds.button (l=\"Delete Proxy\", w=widthButton, h=heightButton, c=\"DeleteProxy()\")\n    # Selected / All\n    cmds.radioButtonGrp (\"DeleteProxy\", numberOfRadioButtons=2, sl=2,\n    label1=\"Selected\", label2=\"All\", columnAttach = [\n    [1, \"left\", 15],\n    [2, \"left\", -20]])\n  \n    cmds.setParent(\"..\")\n    \n    cmds.separator()\n    # Show Proxy \n    cmds.checkBoxGrp (\"ShowProxy\", numberOfCheckBoxes=1, value1=1,\n    label1=\"Show Proxy\", columnAttach=[1, 'right', 45],\n    onCommand1= \"hideorShowProxySet(value = 1)\",\n    offCommand1= \"hideorShowProxySet(value = 0)\")\n\n    # =============================================\n    # Deform Manager\n    posHor1 = 95\n    cmds.frameLayout ('deformManagerTab', label=\"Deform Manager\", collapse=True, collapsable=True,\n    collapseCommand = \"deformManager_VisCollapse(); cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\",\n    expandCommand = \"deformManager_VisExpand(); cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\")\n    \n    cmds.separator (h=1,style=\"none\")\n    # All / None\n    cmds.rowLayout (numberOfColumns=2)\n    cmds.button (l=\"All\", w=140,  \n    c=\"def nodesOnorOff():\\n    turnOnNodesManager()\\nTrueOrFalse = 1 \\nprintResult = 'Turn On all nodes from Deform Manager'\\nturnonOrOffAllDeform()\\nremoveHeavyMesh_Set_Frozen()\")\n    cmds.button (l=\"None\", w=140, \n    c=\"def nodesOnorOff():\\n    turnOffNodesManager()\\nTrueOrFalse = 0 \\nprintResult = 'Turn Off all nodes from Deform Manager'\\nturnonOrOffAllDeform()\\naddHeavyMesh_Set_Frozen()\")\n    cmds.setParent(\"..\")\n\n\n    # Nodes Checkboxes Heavy Mesh connected / BlendShape / Wire\n    cmds.checkBoxGrp (\"NodesCheckbox1\", numberOfCheckBoxes=3,\n    label1=\"HeavyMeshes\", value1=True,\n    columnWidth= [ [1, posHor1], [2, 90] ],\n    onCommand1= \"removeHeavyMesh_Set_Frozen()\" ,\n    offCommand1= \"addHeavyMesh_Set_Frozen()\",\n\n    label2=\"BlendShape\", value2=True, \n    onCommand2= \"nodeName = 'blendShape'; turnOnNodesManager()\" ,\n    offCommand2= \"nodeName = 'blendShape'; turnOffNodesManager()\",\n    \n    label3=\"Wire\", value3=True, \n    onCommand3= \"nodeName = 'wire'; turnOnNodesManager()\" ,\n    offCommand3= \"nodeName = 'wire'; turnOffNodesManager()\",)\n    # Nodes Checkboxes Wrap / PolySmooth / DeltaMush\n    cmds.checkBoxGrp (\"NodesCheckbox2\", numberOfCheckBoxes=3,\n    label1=\"Wrap\", value1=True,\n    columnWidth= [ [1, posHor1], [2, 90] ],\n    onCommand1= \"nodeName = 'wrap'; turnOnNodesManager()\" ,\n    offCommand1= \"nodeName = 'wrap'; turnOffNodesManager()\",\n    \n    label2=\"PolySmooth\", value2=True, \n    onCommand2= \"nodeName = 'polySmoothFace'; turnOnNodesManager()\" ,\n    offCommand2= \"nodeName = 'polySmoothFace'; turnOffNodesManager()\",\n    \n    label3=\"DeltaMush\", value3=True, \n    onCommand3= \"nodeName = 'deltaMush'; turnOnNodesManager()\" ,\n    offCommand3= \"nodeName = 'deltaMush'; turnOffNodesManager()\",)\n    # Nodes Checkboxes ffd / Tension / PolySoftEdge\n    cmds.checkBoxGrp (\"NodesCheckbox3\", numberOfCheckBoxes=3,\n    label1=\"ffd\", value1=True,\n    columnWidth= [ [1, posHor1], [2, 90] ],\n    onCommand1= \"nodeName = 'ffd'; turnOnNodesManager()\" ,\n    offCommand1= \"nodeName = 'ffd'; turnOffNodesManager()\",\n    \n    label2=\"Tension\", value2=True, \n    onCommand2= \"nodeName = 'tension'; turnOnNodesManager()\" ,\n    offCommand2= \"nodeName = 'tension'; turnOffNodesManager()\",\n    \n    label3=\"PolySoftEdge\", value3=True, \n    onCommand3= \"nodeName = 'polySoftEdge'; turnOnNodesManager()\" ,\n    offCommand3= \"nodeName = 'polySoftEdge'; turnOffNodesManager()\",)\n    \n    \n    # Nodes Checkboxes polyMapCut / PolyTweakUV / PolyPlanarProj\n    cmds.checkBoxGrp (\"NodesCheckbox4\", numberOfCheckBoxes=3,\n    label1=\"PolyMapCut\", value1=True,\n    columnWidth= [ [1, posHor1], [2, 90] ],\n    onCommand1= \"nodeName = 'polyMapCut'; turnOnNodesManager()\" ,\n    offCommand1= \"nodeName = 'polyMapCut'; turnOffNodesManager()\",\n    \n    label2=\"PolyTweakUV\", value2=True, \n    onCommand2= \"nodeName = 'polyTweakUV'; turnOnNodesManager()\" ,\n    offCommand2= \"nodeName = 'polyTweakUV'; turnOffNodesManager()\",\n    \n    label3=\"PolyPlanarProj\", value3=True, \n    onCommand3= \"nodeName = 'polyPlanarProj'; turnOnNodesManager()\" ,\n    offCommand3= \"nodeName = 'polyPlanarProj'; turnOffNodesManager()\",)\n    \n    cmds.separator()\n        # Nodes Checkboxes polyMapCut / PolyTweakUV / PolyPlanarProj\n    cmds.checkBoxGrp (\"NodesCheckbox5\", numberOfCheckBoxes=2,\n    label1=\"SkinCluster\", value1=True, \n    columnWidth= [ [1, posHor1], [2, 90] ],\n    onCommand1= \"nodeName = 'skinCluster'; turnOnNodesManager()\" ,\n    offCommand1= \"nodeName = 'skinCluster'; turnOffNodesManager(); removeSkinClusterProxy_FromExcludedNodes()\",\n    \n    label2=\"Cluster\", value2=True, \n    onCommand2= \"nodeName = 'cluster'; turnOnNodesManager()\" ,\n    offCommand2= \"nodeName = 'cluster'; turnOffNodesManager()\")\n\n    \n\n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n    \n    #==================================================================\n                # frameLayout Delete Original Rig\n    cmds.frameLayout ('DeleteOriginalRig', label=\"Option 2 (Delete Original Rig)\", marginHeight=7, marginWidth=7, collapse=False, collapsable=True,\n    collapseCommand = \"Option_2_VisCollapse(); cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\",\n    expandCommand = \"Option_2_VisExpand(); cmds.window ('FCM_Proxy_Maker_Window', edit=True, h=100)\")\n    \n    \n        \n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", 8]) \n    \n    cmds.button (l=\"Load Proxy\", w=widthButton, h=heightButton, c=\"loadProxyRef()\")\n    cmds.popupMenu(\"ProxyPopUp\")\n    cmds.menuItem(l=\"Go to Proxy Rig\", c=\"goToProxyRig()\")\n    \n    cmds.button (l=\"Load Normal\", w=widthButton, h=heightButton, c=\"loadNormalRef()\")\n    cmds.popupMenu(\"NormalPopUp\")\n    cmds.menuItem(l=\"Go to Normal Rig\", c=\"goToNormalRig()\")\n    \n    cmds.setParent(\"..\")\n    \n    # Save After Load / Show Label Proxy\n    cmds.checkBoxGrp (\"SaveAfterLoading\", numberOfCheckBoxes=2, columnAttach= [2, \"both\", 20], enable2=False,\n    label1=\"Save After Loading\", label2=\"Show Label Proxy\", columnWidth=[1, 120],\n    ann='Save the file after load the reference, this function is for those rigs who always crash after be loaded',\n    onCommand1= \"createSettings(); cmds.setAttr ('FCM_Proxy_Maker_Settings.Save_After_Loading', 1)\",\n    offCommand1= \"createSettings(); cmds.setAttr ('FCM_Proxy_Maker_Settings.Save_After_Loading', 0)\")\n    \n    cmds.separator()\n\n    # Create Automatic Proxy\n    cmds.button (l=\"Create Automatic Proxy\", w=widthButton, h=heightButton, c=\"createAutomaticProxy()\")\n    cmds.button (l=\"Delete Original Rig\", w=widthButton, h=heightButton, c=\"deleteOriginalRig()\")\n\n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n    \n    #==================================================================\n                # Modify Proxy\n    cmds.frameLayout (label=\"Modify Proxy\", marginHeight=5, marginWidth=5, collapse=True, collapsable=True,\n    collapseCommand = \"cmds.window (\\\"FCM_Proxy_Maker_Window\\\", edit=True, h=100)\")\n    # Checkboxes Group Isolate Selection / Mirror X \n    cmds.checkBoxGrp (\"ChechboxGroup1\", numberOfCheckBoxes=1, label1=\"Mirror X\",\n    onCommand1=\"maya.mel.eval('reflectionSetMode objectx')\",\n    offCommand1=\"maya.mel.eval('reflectionSetMode none')\")\n    \n    separation = 0\n    cmds.rowLayout (numberOfColumns=5,\n    cat= [[1, \"both\", separation], [2, \"both\", separation], [3, \"both\", separation], [4, \"both\", separation], [5, \"both\", separation]])\n    # Modelling Tool: MultiCut\n    cmds.iconTextButton (style=\"iconAndTextHorizontal\", image1=\"polySplitEdgeRing.png\", c=\"cmds.SplitEdgeRingTool()\")\n    # Modelling Tool: polySplitEdgeRing\n    cmds.iconTextButton (style=\"iconAndTextHorizontal\", image1=\"multiCut_NEX32.png\", c=\"cmds.dR_multiCutTool()\")\n    # Modelling Tool: GoToBindPose\n    cmds.iconTextButton (style=\"iconAndTextHorizontal\", image1=\"goToBindPose.png\", c=\"cmds.GoToBindPose()\")\n    # Modelling Tool: polyGrowSelection\n    cmds.iconTextButton (style=\"iconAndTextHorizontal\", image1=\"polyGrowSelection.png\", c=\"cmds.polySelectConstraint (pp=1)\")\n    # Modelling Tool: polyShrinkSelection\n    cmds.iconTextButton (style=\"iconAndTextHorizontal\", image1=\"polyShrinkSelection.png\", c=\"cmds.polySelectConstraint (pp=2)\")\n    \n    cmds.setParent(\"..\")\n    \n    cmds.rowLayout (numberOfColumns=3, columnAttach= [2, \"both\", 8])\n    # Quick Reduce:\n    widthButton = 82\n    # -50%\n    cmds.button (l=\"-50%\", w=widthButton, h=heightButton, c=\"reducePoly(percentage = 50)\")\n    # -25%\n    cmds.button (l=\"-25%\", w=widthButton, h=heightButton, c=\"reducePoly(percentage = 25)\")\n    # -10%\n    cmds.button (l=\"-10%\", w=widthButton, h=heightButton, c=\"reducePoly(percentage = 10)\")\n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n    \n    #==================================================================\n                # Check Functions\n    cmds.frameLayout (label=\"Check Functions\", marginHeight=5, marginWidth=5, collapse=True, collapsable=True, \n    collapseCommand = \"cmds.window (\\\"FCM_Proxy_Maker_Window\\\", edit=True, h=100)\")\n    # Smooth Preview Manager\n    cmds.frameLayout (label=\"Smooth Mesh Preview Manager\", marginHeight=5, marginWidth=5, collapse=True, collapsable=True, \n    collapseCommand = \"cmds.window (\\\"FCM_Proxy_Maker_Window\\\", edit=True, h=100)\")\n    \n    sepHor = 15\n    cmds.radioButtonGrp (\"Radio2\", numberOfRadioButtons=3, sl=1, \n    label=\"Iterations:\", label1=\"0\", label2=\"1\", label3=\"2\",\n    columnAttach = [\n    [1, \"left\", (sepHor + 10)],\n    [2, \"left\", (sepHor + -55)],\n    [3, \"left\", (sepHor + -110)],\n    [4, \"left\", (sepHor + -165)]])\n    \n    cmds.rowLayout (numberOfColumns=3, adjustableColumn=True)\n    cmds.button (label=\"Apply\", w=widthButton, h=heightButton, c=\"applyButtonSPM()\")\n    cmds.popupMenu()\n    cmds.menuItem(l=\"\", c= \"cmds.launch (web='https://thumbs.dreamstime.com/b/egg-rolling-across-table-slow-motion-filmed-fps-49495604.jpg')\")\n    cmds.radioButtonGrp (\"Radio1\", numberOfRadioButtons=2, sl=2,\n    label1=\"Select\", label2=\"All\", columnAttach = [[1, \"left\", columnAttach1], [2, \"left\", columnAttach2]]) \n    \n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n    \n    cmds.separator (h=1)\n    #===============\n    # Profiler / Measure Performance\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", 8]) \n    widthButton = 125\n    # Measure performance\n    cmds.button (label=\"Measure Performance\", w=widthButton, h=heightButton, ann='Open measure performance, thank you Jorn-Harald Paulsen for creating this amazing tool!', c= \"maya.mel.eval(\\\"//*************************************************************************************************************\\\\n// Title: jh_measurePerformance.mel\\\\n// Author: Jorn-Harald Paulsen\\\\n// Created: December 7, 2011\\\\n// Last Update: June 06, 2013\\\\n// Description: Utility to measure the speed of a scene, especially useful for rig-performance tweaks.\\\\n//*************************************************************************************************************\\\\n// MAIN WINDOW\\\\n//*************************************************************************************************************\\\\nglobal proc jh_measurePerformance ()\\\\n{\\\\n  //Delete window if it already exists\\\\n  if (`window -q -ex jh_measurePerformance`) deleteUI jh_measurePerformance;\\\\n\\\\n  //Main Window\\\\n  window -te 30 -t \\\\\\\"Measure Performance\\\\\\\" -mxb 0 -s 1 -rtf 0 -mb 0 -mbv 0 -w 350 -h 544 jh_measurePerformance;\\\\n\\\\n  //Window content\\\\n  columnLayout -adjustableColumn true;\\\\n  text -label \\\\\\\"\\\\\\\\nUtility to measure performance/evaluation of the scene\\\\\\\" -fn boldLabelFont;\\\\n  separator -w 300 -h 10;\\\\n  text -label \\\\\\\"It measures by playing off the scene, so you should\\\\\\\";\\\\n  text -label \\\\\\\"have animation on the obects you want to evaluate!\\\\\\\";\\\\n  text -label \\\\\\\"Note: Longer playback = More accurate results\\\\\\\";\\\\n  separator -w 300 -h 15;\\\\n  text -label \\\\\\\"Startframe:\\\\\\\";\\\\n  intField startFrame;\\\\n  text -label \\\\\\\"Endframe:\\\\\\\";\\\\n  intField endFrame;\\\\n  separator -w 300 -h 15;\\\\n  text -label \\\\\\\"Number of nodes to return:\\\\\\\";\\\\n  intField -v 20 numNodes;\\\\n  separator -w 300 -h 10;\\\\n  button -label \\\\\\\"Measure performance\\\\\\\" -c jh_evaluate;\\\\n  textField -text \\\\\\\"Time taken: \\\\\\\" -ed 0 timeField;\\\\n  textField -text \\\\\\\"FPS: \\\\\\\" -ed 0 fpsField;\\\\n  textScrollList -ams 0 -h 250 -sc jh_selNode evaluatedNodes;\\\\n  separator -w 300 -h 15;\\\\n  text -label \\\\\\\"Filter by nodetype\\\\\\\" -fn boldLabelFont;\\\\n  textField -text \\\\\\\"\\\\\\\" nodeField;\\\\n  button -label \\\\\\\"Filter\\\\\\\" -c jh_filterResult;\\\\n  separator -w 300 -h 15;\\\\n  button -label \\\\\\\"Choose where to save the file\\\\\\\" -c jh_getExportDir;\\\\n  textField -en 0 evalExportField;\\\\n  button -label \\\\\\\"Export the results\\\\\\\" -c jh_exportToFile;\\\\n  separator -w 300 -h 15;\\\\n  //Set the startFrame/endFrame min/max to the timeline's min/max\\\\n  intField -e -v `playbackOptions -q -min` startFrame;\\\\n  intField -e -v `playbackOptions -q -max` endFrame;\\\\n  //Create the window\\\\n  window -e -w 350 -h 544 jh_measurePerformance;\\\\n  showWindow jh_measurePerformance;\\\\n}\\\\n\\\\nglobal proc jh_evaluate()\\\\n{\\\\n  //Remove all items in the textScrollList\\\\n  textScrollList -e -ra evaluatedNodes;\\\\n  //Get the frames to playback\\\\n  int $min = `intField -q -v startFrame`;\\\\n  int $max = `intField -q -v endFrame`;\\\\n  //Set the timeSlider to the min/max values\\\\n  playbackOptions -min $min -max $max;\\\\n  //Get the number of frames to playback\\\\n  int $frames = $max - $min;\\\\n  //Get the number of nodes to return\\\\n  int $nodesCount = `intField -q -v numNodes`;\\\\n\\\\n  //Set the playBack to Free/Play Every Frame\\\\n  playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 0;\\\\n  //Set the timeSlider to the startFrame\\\\n  currentTime `playbackOptions -q -min`;\\\\n  //Reset the dgtimer\\\\n  dgtimer -on -reset;\\\\n  //Play the scene (don't loop)\\\\n  play -wait;\\\\n  //Turn off the dgtimer\\\\n  dgtimer -off;\\\\n  //Stor the result of the dgTimer\\\\n  string $evalResult[] = `dgtimer -outputFile \\\\\\\"MEL\\\\\\\" -maxDisplay $nodesCount -query`;\\\\n  //Extract the elapsed time and the FPS\\\\n  string $tempToken[];\\\\n  tokenize $evalResult[12] \\\\\\\": \\\\\\\" $tempToken;\\\\n  float $time = $tempToken[3];\\\\n  float $fps = ($frames / $time);\\\\n  //Update the textField for time and FPS\\\\n  textField -e -text (\\\\\\\"Time taken: \\\\\\\" + $tempToken[3] + \\\\\\\" seconds\\\\\\\") timeField;\\\\n  textField -e -text (\\\\\\\"FPS: \\\\\\\" + $fps) fpsField;\\\\n  //For each returned node\\\\n  for($a = 40; $a < (40 + $nodesCount); $a++)\\\\n  {\\\\n    //Remove all of the spaces between each element\\\\n    string $el[];\\\\n    tokenize $evalResult[$a] \\\\\\\" \\\\\\\" $el;\\\\n    //If the result has a % at index 3\\\\n    if (`gmatch $el[3] \\\\\\\"*%\\\\\\\"` == 1)\\\\n    {\\\\n      //Create a separator string\\\\n      string $sep = \\\\\\\"    |    \\\\\\\";\\\\n      //Generate the string to put into the textScrollList\\\\n      string $string = ($el[0] + $sep + $el[3] + $sep + $el[7] + $sep + $el[8]);\\\\n      //Update the textScrollList\\\\n      textScrollList -e -append $string evaluatedNodes;\\\\n    }\\\\n  }\\\\n  //Get the actual number of elements returned\\\\n  int $returnedElements = size(`textScrollList -q -ai evaluatedNodes`);\\\\n  //Update the node count to the actual number\\\\n  intField -e -v $returnedElements numNodes;\\\\n  //Print the result\\\\n  print $evalResult;\\\\n  print \\\\\\\"\\\\\\\\n\\\\\\\\n\\\\\\\\nSee the script editor for details!\\\\\\\\n\\\\\\\";\\\\n}\\\\n\\\\nglobal proc jh_selNode()\\\\n{\\\\n  //Get the selected item in the textScrollList\\\\n  string $selItem[] = `textScrollList -q -si evaluatedNodes`;\\\\n  //Extract the elapsed time and the FPS\\\\n  string $tempToken[];\\\\n  tokenize $selItem[0] \\\\\\\"|\\\\\\\" $tempToken;\\\\n  //If the object exists\\\\n  if(objExists($tempToken[3]) == 1)\\\\n  {\\\\n    //Select the item\\\\n    select -r $tempToken[3];\\\\n    //Print information\\\\n    print (\\\\\\\"\\\\\\\\nSelected: \\\\\\\" + $tempToken[3] + \\\\\\\"\\\\\\\\n\\\\\\\");\\\\n  }\\\\n}\\\\n\\\\nglobal proc jh_filterResult()\\\\n{\\\\n  //Get the text to filter from\\\\n  string $filter = `textField -q -text nodeField`;\\\\n  //Get all of the items in the textScrollList\\\\n  string $allItems[] = `textScrollList -q -ai evaluatedNodes`;\\\\n  //Remove all items in the textScrollList\\\\n  textScrollList -e -ra evaluatedNodes;\\\\n  //For each item in the textScrollList\\\\n  for($item in $allItems)\\\\n  {\\\\n    //Separate the string\\\\n    string $tempToken[];\\\\n    tokenize $item \\\\\\\" | \\\\\\\" $tempToken;\\\\n    //If the current element matches the filter-tekst, add it to the textScrollList\\\\n    if (`gmatch $tempToken[2] $filter` == 1) textScrollList -e -append $item evaluatedNodes;\\\\n  }\\\\n  //Get the actual number of elements returned\\\\n  int $returnedElements = size(`textScrollList -q -ai evaluatedNodes`);\\\\n  //If no elements was returned\\\\n  if($returnedElements == 0)\\\\n  {\\\\n    //Add the original elements back into the textScrollList\\\\n    for($element in $allItems) textScrollList -e -append $element evaluatedNodes;\\\\n    //Print warning message\\\\n    warning \\\\\\\"\\\\\\\\nCould not find any matching items!\\\\\\\\n\\\\\\\";\\\\n  }\\\\n  //Else, print information\\\\n  else print (\\\\\\\"A total of \\\\\\\" +  $returnedElements + \\\\\\\" nodes was found matching \\\\\\\\\\\\\\\"\\\\\\\" + $filter + \\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n}\\\\n\\\\nglobal proc jh_getExportDir()\\\\n{\\\\n  //Open the file-dialog, and get the results from it\\\\n  string $getExportDir = `fileDialog -m 1 -dm \\\\\\\"*.mel\\\\\\\"`;\\\\n  //Put the directory in the textField\\\\n  textField -e -text $getExportDir evalExportField;\\\\n}\\\\n\\\\nglobal proc jh_exportToFile()\\\\n{\\\\n  //Get all of the items in the textScrollList\\\\n  string $allItems[] = `textScrollList -q -ai evaluatedNodes`;\\\\n  //Get the directory for where to store the animation\\\\n  string $exportDir = `textField -q -text evalExportField`;\\\\n  //If a directory wasn't defined, print error\\\\n  if($exportDir == \\\\\\\"\\\\\\\") error \\\\\\\"\\\\\\\\nYou need to define a directory to store the animation in!\\\\\\\\n\\\\\\\";\\\\n\\\\n  //Create and open the storefile for writing\\\\n  int $fileId = `fopen $exportDir \\\\\\\"w\\\\\\\"`;\\\\n  //For each item in the textScrollList, print the item to the file\\\\n  for($item in $allItems) fprint $fileId ($item + \\\\\\\"\\\\\\\\n\\\\\\\");\\\\n  //Close the file for writing\\\\n  fclose $fileId;\\\\n  //Print information\\\\n  print \\\\\\\"\\\\\\\\nDone!\\\\\\\";\\\\n}\\\\n\\\\n\\\\njh_measurePerformance;\\\\n\\\" )\\n\" )\n    # Profiler\n    cmds.button (label=\"Profiler\", w=widthButton, h=heightButton, c=\"cmds.ProfilerTool()\")\n\n    cmds.setParent(\"..\")\n    \n    # DG / Parallel\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", 8]) \n    cmds.button (label=\"DG\", w=widthButton, h=heightButton, c=\"cmds.evaluationManager (mode='off')\")\n    cmds.button (label=\"Parallel\", w=widthButton, h=heightButton, c=\"cmds.evaluationManager (mode='off'); cmds.evaluationManager (mode='parallel')\")\n    cmds.popupMenu('GPUOverridePopUp')\n    cmds.menuItem(l='GPU Override:', divider=True)\n    cmds.menuItem(l='On', c=\"maya.mel.eval('turnOnOpenCLEvaluatorActive')\")\n    cmds.menuItem(l='Off', c=\"maya.mel.eval('turnOffOpenCLEvaluatorActive')\")\n\n    cmds.setParent(\"..\")\n    \n    # Show Frame Rate / Update View Active\n    cmds.checkBoxGrp (\"HUDFrameRate\", numberOfCheckBoxes=2,\n    label1=\"HUD Frame Rate\",\n    onCommand1=\"maya.mel.eval ('setFrameRateVisibility 1')\",\n    offCommand1=\"maya.mel.eval ('setFrameRateVisibility 0')\",\n    \n    label2=\"Update View Active\",\n    onCommand2=\"cmds.playbackOptions (v='active')\",\n    offCommand2=\"cmds.playbackOptions (v='all')\")\n    cmds.setParent(\"..\")\n    \n    #==================================================================\n                # Extra Utilities\n    cmds.frameLayout (\"extraUtilitiesTab\", l=\"Extra Utilities\", marginHeight=5, marginWidth=5, collapse=True, collapsable=True, \n    collapseCommand = \"cmds.window (\\\"FCM_Proxy_Maker_Window\\\", edit=True, h=2, w=2)\")\n    horizontal = 130\n    horizontalColumn = 20\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", horizontalColumn]) \n    cmds.text( l='Selection Tools', w=horizontal)\n    cmds.text( l='Adv Tools', w=horizontal)\n\n\n    \n    cmds.setParent(\"..\")\n    \n\n    # Unlock All Vis Meshes / toggle node state\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", horizontalColumn]) \n    cmds.button (label=\"Select Vis Meshes\", w=horizontal, c=\"selectAllVisibleMeshes()\", ann='Select every visible mesh in the scene, if is hidded by layer display wont be selected, same if is hidded through \".lodVisibility\"')\n    cmds.button (l=\"Toggle Node State\", w=horizontal, c=\"toggleNodeState()\", ann='Toggle Node State from tab Node Behaviour between \"Normal\" and \"Has no effect\"')\n    cmds.setParent(\"..\")\n    # Select all vis meshes / Give me the type node\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", horizontalColumn]) \n    cmds.button (label=\"Unlock Vis Meshes\", w=horizontal, c=\"unlockAllVismeshes()\", ann='If the mesh you need to select is unselectable and not by layerdisplay you should try this button')\n    cmds.button (l=\"Give Me The Type Node\", w=horizontal, c=\"giveMeTheType()\", ann='Select any object in the scene and will print the object type')\n    cmds.setParent(\"..\")\n    # All nodes From Sel / Print blocking nodes\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", horizontalColumn] ) \n    cmds.button (label=\"All Nodes From Sel\", w=horizontal, c=\"getAllNodesSceneFromSelection()\", ann=\"Get All nodes From Selection\")\n    cmds.button (label=\"Print Blocking Nodes\", w=horizontal, c=\"printBlockingNodes()\", ann=\"Print all nodes are blocking parallel\")\n    cmds.setParent(\"..\")\n    # Select Most Complex Mesh / Empty\n    cmds.rowLayout (numberOfColumns=2, columnAttach= [2, \"both\", horizontalColumn] ) \n    cmds.button (label=\"Sel Most Complex Mesh\", w=horizontal, c=\"selectMostComplexMesh()\", ann='Select the mesh with more nodes attached in the scene, great for analize it or frozen it')\n    cmds.rowLayout (numberOfColumns=2 ) \n    anchito = 63\n    cmds.button (label=\"Frozen\", w=anchito, c=\"frozenAllSelected()\", ann='Turn On the attribute Frozen for every selection')\n    cmds.button (label=\"UnFrozen\",w=anchito, c=\"unFrozenAllSelected()\", ann='Turn OFF the attribute Frozen for every selection')\n    cmds.setParent(\"..\")\n\n    cmds.setParent(\"..\")\n    # Select Frozen Nodes / Empty\n    cmds.rowLayout (numberOfColumns=1, columnAttach= [2, \"both\", horizontalColumn] ) \n    cmds.button (label=\"Sel Frozen Nodes\", w=horizontal, c=\"cmds.warning('WIP, Sorry!')\")\n\n    cmds.setParent(\"..\")\n\n\n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n    \n    #==================================================================\n\n    cmds.showWindow (windowProxyMaker)\n    \n    # Resize window\n    cmds.window (\"FCM_Proxy_Maker_Window\", edit=True, w=2, h=2)\n\n      \n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                Check Functions\n                \n    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n    \n    # Show Proxy\n    if cmds.objExists (\"Set_Proxy\"):\n        try:\n            cmds.select (\"Set_Proxy\")\n            sel = cmds.ls (sl=True)\n            if  cmds.getAttr (sel[0] + \".visibility\") == 1: # I need only the first index to have the correct return\n                cmds.checkBoxGrp (\"ShowProxy\", edit=True, value1=True)\n            else:\n                cmds.checkBoxGrp (\"ShowProxy\", edit=True, value1=False)\n            cmds.select(clear=True)\n        except:\n            pass\n    # Show Proxy Del Rig\n    '''\n    if cmds.objExists (\"Folder_Proxys\"):\n        if cmds.getAttr ('Folder_Proxys.visibility'):\n            cmds.checkBoxGrp (\"ShowProxyDelRig\", edit=True, value1=True)\n        else:\n            cmds.checkBoxGrp (\"ShowProxyDelRig\", edit=True, value1=False)\n    '''\n    \n    # Show Rig\n    if cmds.objExists (\"Set_Rig\"):\n        cmds.select (\"Set_Rig\")\n        if  cmds.getAttr (\".visibility\") == 1:\n            cmds.checkBoxGrp (\"ShowProxy\", edit=True, value2=True)\n        else:\n            cmds.checkBoxGrp (\"ShowProxy\", edit=True, value2=False)\n        cmds.select(clear=True)\n    # Symmetry X\n    if cmds.symmetricModelling (q=True, symmetry=True) == 1:\n        cmds.checkBoxGrp (\"ChechboxGroup1\", edit=True, value1=True) \n    else: \n        cmds.checkBoxGrp (\"ChechboxGroup1\", edit=True, value1=False)    \n    # HUD FrameRate\n    if maya.mel.eval ('optionVar -q frameRateVisibility') == 1l: \n        cmds.checkBoxGrp (\"HUDFrameRate\", edit=True, value1=True) \n    else: \n        cmds.checkBoxGrp (\"HUDFrameRate\", edit=True, value1=False)  \n    # Update View Active\n    if cmds.playbackOptions (q=True, v=True) == \"active\": \n        cmds.checkBoxGrp (\"HUDFrameRate\", edit=True, value2=True) \n    else: \n        cmds.checkBoxGrp (\"HUDFrameRate\", edit=True, value2=False) \n    # Check Save After Loading\n    \n    if cmds.objExists(\"FCM_Proxy_Maker_Settings\"):\n        if cmds.getAttr (\"FCM_Proxy_Maker_Settings.Save_After_Loading\") == 1:\n            cmds.checkBoxGrp (\"SaveAfterLoading\", edit=True, value1=True) \n        else:\n            cmds.checkBoxGrp (\"SaveAfterLoading\", edit=True, value1=False) \n    # Option 1 Vis\n    if cmds.getAttr (\"FCM_Proxy_Maker_Settings.Option_1_Vis\"):\n        cmds.frameLayout ('keepOriginalRig', e=True, collapse=False)\n    else:\n        cmds.frameLayout ('keepOriginalRig', e=True, collapse=True)\n    \n    # Option 2 Vis\n    if cmds.getAttr (\"FCM_Proxy_Maker_Settings.Option_2_Vis\"):\n        cmds.frameLayout ('DeleteOriginalRig', e=True, collapse=False)\n    else:\n        cmds.frameLayout ('DeleteOriginalRig', e=True, collapse=True)\n\n    # Deform Manager Vis\n    if cmds.getAttr (\"FCM_Proxy_Maker_Settings.deformManager_Vis\"):\n        cmds.frameLayout ('deformManagerTab', e=True, collapse=False)\n    else:\n        cmds.frameLayout ('deformManagerTab', e=True, collapse=True)\n                    ####### Node Manager #######\n    # HeavyMeshes\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.HeavyMeshConnected_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value1=False)\n    # BlendShape\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.blendShape_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value2=False)\n    # Wire\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.wire_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox1', edit=True, value3=False)\n\n        \n    # Wrap\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.wrap_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox2', edit=True, value1=False)\n    # PolySmoothFace\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.polySmoothFace_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox2', edit=True, value2=False)\n    # DeltaMush\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.deltaMush_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox2', edit=True, value3=False)\n\n    # Ffd\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.ffd_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox3', edit=True, value1=False)\n    # Tension\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.tension_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox3', edit=True, value2=False)\n    # PolySoftEdge\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.polySoftEdge_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox3', edit=True, value3=False)\n\n    # polyMapCut\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.polyMapCut_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox4', edit=True, value1=False)\n    # polyTweakUV\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.polyTweakUV_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox4', edit=True, value2=False)\n    # polyPlanarProj\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.polyPlanarProj_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox4', edit=True, value3=False)\n\n    # skinCluster\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.skinCluster_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox5', edit=True, value1=False)\n    # Cluster\n    if cmds.getAttr ('FCM_Proxy_Maker_Settings.cluster_State') == 0:\n        cmds.checkBoxGrp ('NodesCheckbox5', edit=True, value2=False)\n    \n\n\n    \n# Open window twice to avoid annoying bug\nProxyMakerWindow()\nProxyMakerWindow()\n# Sanity Check \nsanityCheck()\n\n\n\n\n\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

global proc asInstallScriptFCMHider(){}

global proc string asInstallScriptLocation ()
{
string $whatIs=`whatIs asInstallScriptFCMHider`;
string $fullPath=`substring $whatIs 25 999`;
string $buffer[];
int $numTok=`tokenize $fullPath "/" $buffer`;
int $numLetters=size($fullPath);
int $numLettersLastFolder=size($buffer[$numTok-1]);
string $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;
return $scriptLocation;
}



